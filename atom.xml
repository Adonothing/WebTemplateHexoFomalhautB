<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fomalhaut🥝</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2022-09-10T14:20:00.000Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>Fomalhaut🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于堆(优先队列)的一些题目</title>
    <link href="https://www.fomal.cc/posts/5837a55a.html"/>
    <id>https://www.fomal.cc/posts/5837a55a.html</id>
    <published>2022-09-10T14:20:00.000Z</published>
    <updated>2022-09-10T14:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LC2146-价格范围内最高排名的-K-样物品"><a href="https://leetcode.cn/problems/k-highest-ranked-items-within-a-price-range/">LC2146. 价格范围内最高排名的 K 样物品</a></h2><p>总体方法-&gt;<strong>BFS+堆</strong></p><p><b>维度优先级：</b>1.最短距离；2.低价格；3.小的x；4.小的y</p><p>因此只有在相同的最短路径基础上再考虑余下的3个维度，最短路我们可以通过BFS去维护</p><p>而余下的三个维度我们具体要取哪一个可以定义在堆的排序规则上，堆会将满足条件的首个元素优先弹出</p><p>题目数据范围：1 &lt;= m, n &lt;= 10^5，1 &lt;= m * n &lt;= 10^5，显然只能接收到O(NlogN)或以下级别</p><p><b>坑点分析：</b>要注意不能只用一个堆，因为堆与普通的单向队列不同，堆里的元素顺序会随着新元素的插入而改变，若只用一个堆且弹出固定size数目的元素，很有可能会把这轮进来的元素也弹出来（只要这个元素足够优先）</p><p>时间复杂度:O(M*N*log(M*N)) 空间复杂度:O(M*N)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">highestRankedKItems</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span>[] pricing, <span class="type">int</span>[] start, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="comment">// 自定义规则堆:pq1存储上一轮循环的pq2遗留的元素，pq2是用来装本轮循环新的元素</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq2 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; grid[a[<span class="number">0</span>]][a[<span class="number">1</span>]] == grid[b[<span class="number">0</span>]][b[<span class="number">1</span>]] ?</span><br><span class="line">                (a[<span class="number">0</span>] == b[<span class="number">0</span>] ? a[<span class="number">1</span>] - b[<span class="number">1</span>] : a[<span class="number">0</span>] - b[<span class="number">0</span>]) : grid[a[<span class="number">0</span>]][a[<span class="number">1</span>]] - grid[b[<span class="number">0</span>]][b[<span class="number">1</span>]]), pq1;</span><br><span class="line">        pq2.add(start);</span><br><span class="line">        vis[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 开启BFS</span></span><br><span class="line">        <span class="keyword">while</span> (!pq2.isEmpty() &amp;&amp; res.size() &lt; k) &#123;</span><br><span class="line">            pq1 = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(pq2); <span class="comment">// pq1复制上一轮的pq2且排序规则也一致</span></span><br><span class="line">            pq2.clear();    <span class="comment">// pq2清空，准备装新一轮的</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> pq1.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = pq1.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (grid[x][y] &gt;= pricing[<span class="number">0</span>] &amp;&amp; grid[x][y] &lt;= pricing[<span class="number">1</span>]) &#123;</span><br><span class="line">                    res.add(Arrays.asList(x, y));   <span class="comment">// 是商品且价钱合适</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (res.size() &gt;= k) <span class="keyword">break</span>; <span class="comment">// 买够了</span></span><br><span class="line">                <span class="comment">// 寻找上下左右的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 下一个在范围内&amp;&amp;没有背访问过&amp;&amp;不是墙</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; n &amp;&amp; !vis[newX][newY] &amp;&amp; grid[newX][newY] != <span class="number">0</span>) &#123;</span><br><span class="line">                        pq2.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);  <span class="comment">// 新的位置入堆</span></span><br><span class="line">                        vis[newX][newY] = <span class="literal">true</span>; <span class="comment">// 标记访问</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">总结一些关于堆(优先队列)的题目以及注意的地方</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="堆" scheme="https://www.fomal.cc/tags/%E5%A0%86/"/>
    
    <category term="优先队列" scheme="https://www.fomal.cc/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>测试加密文章</title>
    <link href="https://www.fomal.cc/posts/5eb72442.html"/>
    <id>https://www.fomal.cc/posts/5eb72442.html</id>
    <published>2022-08-31T07:21:00.000Z</published>
    <updated>2022-08-31T07:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b27d109d7d8a3f997c0b9080ad748909caf1c00c1124f2aafb2d4d7a7b12686d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一篇加密文章，输入正确密码才能查看!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">测试加密文章</summary>
    
    
    
    <category term="演示" scheme="https://www.fomal.cc/categories/%E6%BC%94%E7%A4%BA/"/>
    
    
    <category term="演示" scheme="https://www.fomal.cc/tags/%E6%BC%94%E7%A4%BA/"/>
    
    <category term="测试" scheme="https://www.fomal.cc/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>容斥原理+计数专题</title>
    <link href="https://www.fomal.cc/posts/34beab1a.html"/>
    <id>https://www.fomal.cc/posts/34beab1a.html</id>
    <published>2022-08-24T14:58:00.000Z</published>
    <updated>2022-08-24T14:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1711-大餐计数"><a href="https://leetcode.cn/problems/count-good-meals/">1711. 大餐计数</a></h3><p>细节满满的一题，组合计算问题再周赛的T3与T4经常出，对于常见的组合计算问题应该要掌握。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPairs</span><span class="params">(<span class="type">int</span>[] deliciousness)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap+计数+容斥原理:</span></span><br><span class="line"><span class="comment">        1 &lt;= deliciousness.length &lt;= 1e5</span></span><br><span class="line"><span class="comment">        0 &lt;= deliciousness[i] &lt;= 2^20</span></span><br><span class="line"><span class="comment">        看数据范围只能用O(N)、O(C*N)、O(NlogN)的时间复杂度算法进行求解</span></span><br><span class="line"><span class="comment">        1.预处理出2的0~21次幂</span></span><br><span class="line"><span class="comment">        2.HashMap统计每个数字出现的个数</span></span><br><span class="line"><span class="comment">        3.枚举每个HashMap中的数字进行计数，以key为锚点，枚举所有的可能的二次幂并球出目标匹配数字；</span></span><br><span class="line"><span class="comment">            之后先统计相同数字组成的对，再统计不同数字组成的对进行相加</span></span><br><span class="line"><span class="comment">        4.最后记得对统计的数字/2</span></span><br><span class="line"><span class="comment">        坑点:</span></span><br><span class="line"><span class="comment">        1.2^0=1也是2的次幂</span></span><br><span class="line"><span class="comment">        2.相同数字的计算方法为:num*(num-1)/2，其中num为数字个数</span></span><br><span class="line"><span class="comment">        3.相同数字的计算方法为:cnt[t]*cnt[key]/2，其中t为要匹配的目标数字，key为当前数字</span></span><br><span class="line"><span class="comment">            可以将2与3统一起来最后一起除2</span></span><br><span class="line"><span class="comment">        4.这里long类型在统计过程中可以不进行MOD(&lt;1e10)，最后才取余即可</span></span><br><span class="line"><span class="comment">            最好先进行除2操作最后再取余，如果顺序反了最后取余再除2结果不对!</span></span><br><span class="line"><span class="comment">            还有最后取余的一定一定要把MOD括起来，否则就会将res先转换为int了!!!!</span></span><br><span class="line"><span class="comment">        5.枚举二次幂可以倒序提前退出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 美味程度之和上限为2^21，预处理出2^0~2^21的幂</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">1</span>, MOD = (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">22</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">21</span>; i++) &#123;</span><br><span class="line">            arr[i] = cur;</span><br><span class="line">            cur *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计数字对应个数</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : deliciousness) &#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="comment">// 寻找每个数字缺失的另一半</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> key : map.keySet()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> map.get(key); <span class="comment">// 该数字key的数目</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">21</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i] - key;  <span class="comment">// 要找的目标数字</span></span><br><span class="line">                <span class="keyword">if</span> (t &lt; <span class="number">0</span>) <span class="keyword">break</span>;   <span class="comment">// 从大的开始枚举，如果当前已经小于0，那么前面的必定小于0，提前break</span></span><br><span class="line">                <span class="comment">// 1.先统计相同数字组成的:组合种数=cnt[key]*(cnt[key]-1)/2</span></span><br><span class="line">                <span class="keyword">if</span> (t == key) &#123;</span><br><span class="line">                    res += num * (num - <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map.containsKey(t)) &#123;</span><br><span class="line">                    <span class="comment">// 2.再统计不同数字之间的cnt[t]*cnt[key]/2</span></span><br><span class="line">                    res += num * map.get(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后统计重了一倍应该除2</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ((res &gt;&gt; <span class="number">1</span>) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">容斥原理+计数</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="容斥原理" scheme="https://www.fomal.cc/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
    <category term="数学" scheme="https://www.fomal.cc/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL总结</title>
    <link href="https://www.fomal.cc/posts/54ed288e.html"/>
    <id>https://www.fomal.cc/posts/54ed288e.html</id>
    <published>2022-08-16T06:18:00.000Z</published>
    <updated>2022-08-16T06:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🍭🍭🍭 以下内容均转自<a href="https://dhc.pythonanywhere.com/entry/share/?key=3ad29aad765a2b98b2b2a745d71bef715507ee9db8adbec98257bac0ad84cbe4">路途博客的 MySQL 总结</a>(已获得作者允许)，最初来源为<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru">黑马程序员的 MySQL 视频课</a></p><div>本博客文章用途均是学习所用，无商业用途，如有侵权请联系博主删除！📧：1174008660@qq.com</div></blockquote><h1>1.基础篇</h1><h2 id="1-1-通用语法及分类">1.1 通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）">DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作">数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项">注意事项</h5><ul><li>UTF8 字符集长度为 3 字节，有些符号占 4 字节，所以推荐用 utf8mb4 字符集</li></ul><h4 id="表操作">表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将 emp 表的 nickname 字段修改为 username，类型为 varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）">DML（数据操作语言）</h3><h4 id="添加数据">添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-2">注意事项</h5><ul><li><strong>字符串</strong>和<strong>日期类型</strong>数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据">更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）">DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名字段</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询">基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询">条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在 in 之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是 NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 年龄等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 小于等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 没有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> idcard <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">-- 有身份证</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 年龄在20到30之间</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 下面语句不报错，但查不到任何信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">30</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 性别为女且年龄小于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">30</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">-- 年龄等于25或30或35</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">25</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">35</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">-- 姓名为两个字</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 身份证最后为X</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="聚合查询（聚合函数）">聚合查询（聚合函数）</h4><p>常见聚合函数(null 值不参与聚合函数运算)：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询">分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件不参与分组；having 是分组后对结果进行过滤。</li><li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性数量</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 根据性别分组，统计男性和女性的平均年龄</span></span><br><span class="line"><span class="keyword">select</span> gender, <span class="built_in">avg</span>(age) <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress;</span><br><span class="line"><span class="comment">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span></span><br><span class="line"><span class="keyword">select</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) address_count <span class="keyword">from</span> employee <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3">注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为<strong>聚合函数</strong>和<strong>分组字段</strong>，查询其他字段无任何意义</li></ul><h4 id="排序查询">排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"><span class="comment">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>, entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4">注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询">分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询第一页数据，展示10条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee LIMIT <span class="number">0</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 查询第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employee LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5">注意事项</h5><ul><li>起始索引从 0 开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL 是 LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL-执行顺序">DQL 执行顺序</h4><p>1.FROM(从哪张表查询) -&gt; 2.WHERE(对数据进行筛选) -&gt; 3.GROUP BY(对筛选的数据进行分组) -&gt; 4.HAVING(分组后的条件列表)-&gt; 5.SELECT(选择对应数据) -&gt; 6.ORDER BY(对结果排序) -&gt; 7.LIMIT(对结果分页)</p><h3 id="DCL">DCL</h3><h4 id="管理用户">管理用户</h4><p>查询用户：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</code></p><p>修改用户密码：<br><code>ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';</code></p><p>删除用户：<br><code>DROP USER '用户名'@'主机名';</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户test，只能在当前主机localhost访问</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建用户test，能在任意主机访问</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="注意事项-6">注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制">权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR '用户名'@'主机名';</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';</code></p><h5 id="注意事项-7">注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="1-2-函数">1.2 函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数">字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将 s1, s2, …, sn 拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串 str 从 start 位置起的 len 个长度的字符串（注意索引从 1 开始）</td></tr></tbody></table><p>使用示例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 拼接</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br><span class="line"><span class="comment">-- 小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="comment">-- 大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="comment">-- 左填充</span></span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">-- 右填充</span></span><br><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="comment">-- 去除空格</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; Hello World &#x27;</span>);</span><br><span class="line"><span class="comment">-- 切片（起始索引为1）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;Hello World&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="数值函数">数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回 x/y 的模</td></tr><tr><td>RAND()</td><td>返回 0~1 内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数 x 的四舍五入值，保留 y 位小数</td></tr></tbody></table><h3 id="日期函数">日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定 date 的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定 date 的月份</td></tr><tr><td>DAY(date)</td><td>获取指定 date 的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔 expr 后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间 date1 和结束时间 date2 之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DATE_ADD</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">YEAR</span>);</span><br></pre></td></tr></table></figure><h3 id="流程函数">流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果 value 为 true，则返回 t，否则返回 f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果 value1 不为空，返回 value1，否则返回 value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果 val1 为 true，返回 res1，… 否则返回 default 默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果 expr 的值等于 val1，返回 res1，… 否则返回 default 默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;中年&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;青年&#x27;</span> <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">from</span> employee;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> workaddress <span class="keyword">when</span> <span class="string">&#x27;北京市&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;上海市&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span></span><br><span class="line"><span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><h2 id="1-3-约束">1.3 约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为 null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1 版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p><strong>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束</strong>。</p><h3 id="常用约束">常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">age <span class="type">int</span> <span class="keyword">check</span>(age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">120</span>),</span><br><span class="line">status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束">外键约束</h3><p>作用：保证数据一致性与完整性</p><p>添加外键：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id) <span class="keyword">references</span> dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为">删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与 RESTRICT 一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与 NO ACTION 一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许为 null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb 不支持）</td></tr></tbody></table><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="1-4-多表查询">1.4 多表查询</h2><h3 id="多表关系">多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多">一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多">多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一">一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询">查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合 A 集合和 B 集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询">内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工姓名，及关联的部门的名称</span></span><br><span class="line"><span class="comment">-- 隐式</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e, dept <span class="keyword">as</span> d <span class="keyword">where</span> e.dept <span class="operator">=</span> d.id;</span><br><span class="line"><span class="comment">-- 显式</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询">外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表 1 的所有数据，包含表 1 和表 2 交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;  <span class="comment">-- 这条语句与下面的语句效果一样</span></span><br><span class="line"><span class="comment">-- 右</span></span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">as</span> e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有 dept 的 employee，右连接可以查询到没有 employee 的 dept</p><h3 id="自连接查询">自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工及其所属领导的名字</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> employee a, employee b <span class="keyword">where</span> a.manager <span class="operator">=</span> b.id;</span><br><span class="line"><span class="comment">-- 没有领导的也查询出来</span></span><br><span class="line"><span class="keyword">select</span> a.name, b.name <span class="keyword">from</span> employee a <span class="keyword">left</span> <span class="keyword">join</span> employee b <span class="keyword">on</span> a.manager <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all">联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A ...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-8">注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用 or 效率高，不会使索引失效</li></ul><h3 id="子查询">子查询</h3><p>SQL 语句中嵌套 SELECT 语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询">标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询销售部所有员工</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="comment">-- 根据销售部部门ID，查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 合并（子查询）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询xxx入职之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="列子查询">列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询销售部和市场部的所有员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询比财务部所有人工资都高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>));</span><br><span class="line"><span class="comment">-- 查询比研发部任意一人工资高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">where</span> dept <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="行子查询">行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与xxx的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (salary, manager) <span class="operator">=</span> (<span class="number">12500</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (salary, manager) <span class="operator">=</span> (<span class="keyword">select</span> salary, manager <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="表子查询">表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> (job, salary) <span class="keyword">in</span> (<span class="keyword">select</span> job, salary <span class="keyword">from</span> employee <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;xxx1&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;xxx2&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.dept <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><h2 id="1-5-事务">1.5 事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询张三账户余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2. 将张三账户余额-1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 此语句出错后张三钱减少但是李四钱没有增加</span></span><br><span class="line">模拟<span class="keyword">sql</span>语句错误</span><br><span class="line"><span class="comment">-- 3. 将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看事务提交方式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"><span class="comment">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置手动提交后上面代码改为：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h3 id="四大特性-ACID">四大特性 ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务">并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a></p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√ 表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1>2.进阶篇</h1><h2 id="2-1-存储引擎">2.1 存储引擎</h2><p>MySQL 体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是 InnoDB。</p><p>相关操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询建表语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> account;</span><br><span class="line"><span class="comment">-- 建表时指定存储引擎</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB;</span><br><span class="line"><span class="comment">-- 查看当前数据库支持的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB">InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx 代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like 'innodb_file_per_table';</code></p><p>从 idb 文件提取表结构数据：<br>（在 cmd 运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM">MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory">Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash 索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点">存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree 索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6 版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择">存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="2-2-性能分析">2.2 性能分析</h2><h3 id="查看执行频次">查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE 'Com_______';</code> 或者 <code>SHOW SESSION STATUS LIKE 'Com_______';</code><br>例：<code>show global status like 'Com_______'</code></p><h3 id="慢查询日志">慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认 10 秒）的所有 SQL 语句的日志。<br>MySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（/etc/my.cnf）中配置如下信息： # 开启慢查询日志开关<br>slow_query_log=1 # 设置慢查询日志的时间为 2 秒，SQL 语句执行时间超过 2 秒，就会视为慢查询，记录慢查询日志<br>long_query_time=2<br>更改后记得重启 MySQL 服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like 'slow_query_log';</code></p><h3 id="profile">profile</h3><p>show profile 能在做 SQL 优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过 set 语句在 session/global 级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定 query_id 的 SQL 语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定 query_id 的 SQL 语句 CPU 的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain">explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法： # 直接在 select 语句之前加上关键字 explain / desc<br>EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE 之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL 认为必须要执行的行数，在 InnoDB 引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered 的值越大越好</li></ul><h2 id="2-3-索引">2.3 索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的 IO 成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构">索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持 B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree 索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6 版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree">B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为 5（5 阶）的 b-tree 为例（每个节点最多存储 4 个 key，5 个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-2">B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash">Hash</h4><p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了 hash 冲突（也称为 hash 碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash 索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应 hash 功能，hash 索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题">面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类">索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题">思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Arm&#x27;</span>;</span><br><span class="line"><span class="comment">-- 备注：id为主键，name字段创建的有索引</span></span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为 1k，一页中可以存储 16 行这样的数据。InnoDB 的指针占用 6 个字节的空间，主键假设为 bigint，占用字节数为 8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的 key 的数量，(n + 1) 表示指针数量（比 key 多一个）。算出 n 约为 1170。</p><p>如果树的高度为 2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为 3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法">语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> tb_user(name);</span><br><span class="line"><span class="comment">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_phone <span class="keyword">on</span> tb_user (phone);</span><br><span class="line"><span class="comment">-- 为profession, age, status创建联合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_pro_age_stat <span class="keyword">on</span> tb_user(profession, age, status);</span><br><span class="line"><span class="comment">-- 为email建立合适的索引来提升查询效率</span></span><br><span class="line"><span class="keyword">create</span> index idx_user_email <span class="keyword">on</span> tb_user(email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_user_email <span class="keyword">on</span> tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则">使用规则</h3><h4 id="最左前缀法则">最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况">索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = '15';</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处 phone 的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like '%工程';</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示">SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force 就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-回表查询">覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是 select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name='xxx';</code>，也只需要通过辅助索引(name)查找到对应的 id，返回 name 和 name 索引对应的 id 即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name='xxx';</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下 SQL 语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username='itcast';</code></p><p>解：给 username 和 password 字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引">前缀索引</h4><p>当字段类型为字符串（varchar, text 等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email, <span class="number">1</span>, <span class="number">5</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的 sub_part 可以看到接取的长度</p><h4 id="单列索引-联合索引">单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';</code><br>这句只会用到 phone 索引字段</p><h5 id="注意事项-9">注意事项</h5><ul><li>多条件联合查询时，MySQL 优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则">设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="2-4-SQL-优化">2.4 SQL 优化</h2><h3 id="插入数据">插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过 1000 条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 load 指令插入。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 <span class="comment">--local-infile（这一行在bash/cmd界面输入）</span></span><br><span class="line">mysql <span class="comment">--local-infile -u root -p</span></span><br><span class="line"># 设置全局参数local_infile为<span class="number">1</span>，开启从本地加载文件导入数据的开关</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@local</span>_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql1.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">&#x27;tb_user&#x27;</span> fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="主键优化">主键优化</h3><p>数据组织方式：在 InnoDB 存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充 100%，每个页包含了 2-N 行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的 50%），InnoDB 会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的 PPT 演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by-优化">order by 优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果 order by 字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain 的 extra 信息显示的是<code>Using index, Using filesort</code>，如果要优化掉 Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现 filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认 256k）</li></ul><h3 id="group-by-优化">group by 优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit-优化">limit 优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前 2000000 条记录，但仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 此语句耗时很长</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span></span><br><span class="line"><span class="comment">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span></span><br><span class="line"><span class="comment">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">as</span> s, (<span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">9000000</span>, <span class="number">10</span>) <span class="keyword">as</span> a <span class="keyword">where</span> s.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><h3 id="count-优化">count 优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用 where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建 key-value 表存储在内存或硬盘，或者是用 redis</p><p>count 的几种用法：</p><ul><li>如果 count 函数的参数（count 里面写的那个字段）不是 NULL（字段值不为 NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟 count(*)一样，因为主键不能为空；count(字段)只计算字段值不为 NULL 的行；count(1)引擎会为每行添加一个 1，然后就 count 这个 1，返回结果也跟 count(*)一样；count(null)返回 0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB 引擎会遍历整张表，把每行的主键 id 值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为 null，不为 null，计数累加；有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update-优化（避免行锁升级为表锁）">update 优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = '123' where id = 1;</code>，这句由于 id 有主键索引，所以只会锁这一行；<br><code>update student set no = '123' where name = 'test';</code>，这句由于 name 没有索引，所以会把整张表都锁住进行数据更新，解决方法是给 name 字段添加索引</p><h1>3.数据类型</h1><h2 id="整型">整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1 个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2 个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3 个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4 个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8 个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型">浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间">日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串">字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1 字节，在此，L&lt; = M 和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4 字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1 或 2 个字节，取决于枚举值的数目 (最大值为 65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个 SET 成员</td><td>1、2、3、4 或 8 个字节，取决于集合 成员的数量（最多 64 个成员）</td></tr></tbody></table><h2 id="二进制类型">二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的 BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的 BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的 BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1>4.权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Grant Table Column</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td style="text-align:left">Synonym for “all privileges”</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td style="text-align:left"><code>Alter_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td style="text-align:left"><code>Alter_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td style="text-align:left"><code>Create_priv</code></td><td style="text-align:left">Databases, tables, or indexes</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td style="text-align:left"><code>Create_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td style="text-align:left"><code>Create_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td style="text-align:left"><code>Create_tablespace_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td style="text-align:left"><code>Create_tmp_table_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td style="text-align:left"><code>Create_user_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td style="text-align:left"><code>Create_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td style="text-align:left"><code>Delete_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td style="text-align:left"><code>Drop_priv</code></td><td style="text-align:left">Databases, tables, or views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td style="text-align:left"><code>Drop_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td style="text-align:left"><code>Event_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td style="text-align:left"><code>Execute_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td style="text-align:left"><code>File_priv</code></td><td style="text-align:left">File access on server host</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td style="text-align:left"><code>Grant_priv</code></td><td style="text-align:left">Databases, tables, or stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td style="text-align:left"><code>Index_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td style="text-align:left"><code>Insert_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td style="text-align:left"><code>Lock_tables_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td style="text-align:left"><code>Process_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td style="text-align:left">See <code>proxies_priv</code> table</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td style="text-align:left"><code>References_priv</code></td><td style="text-align:left">Databases or tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td style="text-align:left"><code>Reload_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td style="text-align:left"><code>Repl_client_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td style="text-align:left"><code>Repl_slave_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td style="text-align:left"><code>Select_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td style="text-align:left"><code>Show_db_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td style="text-align:left"><code>Show_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td style="text-align:left"><code>Shutdown_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td style="text-align:left"><code>Super_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td style="text-align:left"><code>Trigger_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td style="text-align:left"><code>Update_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td style="text-align:left">Synonym for “no privileges”</td><td style="text-align:left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td style="text-align:left">Dual password administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td style="text-align:left">Allow queries blocked by audit log filter</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td style="text-align:left">Audit log administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td style="text-align:left">Backup administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td style="text-align:left">Clone administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td style="text-align:left">Redo log archiving administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td style="text-align:left">NDB Cluster</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td style="text-align:left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr></tbody></table><h1>5.图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版 30 天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持 Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1>6.安装</h1><h1>7.小技巧</h1><ol><li>在 SQL 语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看 Mysql 数据库占用空间：</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_schema &quot;Database Name&quot;</span><br><span class="line">     , <span class="built_in">SUM</span>(data_length <span class="operator">+</span> index_length) <span class="operator">/</span> (<span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span>) &quot;Database Size in MB&quot;</span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">转自路途博客的MySQL总结，来源为黑马程序员的MySQL视频课</summary>
    
    
    
    <category term="数据库" scheme="https://www.fomal.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://www.fomal.cc/tags/MySQL/"/>
    
    <category term="关系型数据库" scheme="https://www.fomal.cc/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>单调队列专题</title>
    <link href="https://www.fomal.cc/posts/cedcefe1.html"/>
    <id>https://www.fomal.cc/posts/cedcefe1.html</id>
    <published>2022-08-12T06:43:42.000Z</published>
    <updated>2022-08-12T06:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-剑指-Offer-59-I-滑动窗口的最大值"><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">1.剑指 Offer 59 - I. 滑动窗口的最大值</a></h3><p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。</p><p>示例：</p><p><img src="../images/p23.jpg" alt="p23"></p><p><strong>思路</strong></p><p><strong>单调双端队列+滑窗：O(N)</strong></p><p>注意:</p><p><strong>1.边界条件:</strong></p><p>1.1 输入数组为空的情况；</p><p>1.2 队列弹出时注意前面加上判空操作；</p><p>1.3 peekFirst()与pollFirst()的用法区别；</p><p><strong>2.思路溯源：</strong></p><p>这里如果用暴力遍历的话，窗口每变化一次都要遍历所有元素找出当前窗口的最大值，渐进时间复杂度为:<strong>O(N*K)</strong></p><p>这里的输入上限为10^5说明总的运算量要达到10^10，绝对会超时的，10^5的输入理论复杂度上限大致在<strong>O(NlogN)</strong></p><p>因此必须要寻找复杂度更低的算法进行求解</p><p>那么最核心的问题就来了，如何在比O(N)小的时间复杂度内找出的窗口最大值呢?</p><p>办法其实有几种：一种可以用树形数据结构如<strong>堆、红黑树</strong>等，此时时间复杂度为O(logN)</p><p>还有一种就是<strong>单调双端队列</strong>：单调双端队列内部维护的仅仅是对于当前窗口所有可能的最大值</p><p>且最大值的顺序与窗口的走势一致，队头位置的最大值是目前窗口的最大值，并且是即将要第一个退出的</p><p>eg：队头[6, 5, 4, 3]队尾</p><p><strong>当有新元素nums[i]加入时是从队尾加入的：</strong></p><p>1.当<strong>nums[i]&gt;队尾</strong>时，队尾的可以弹出。</p><p>因为队尾的都不够nums[i]大，而窗口的中肯定是前面的队尾在前面，因此当前状态的最大值必定轮不到队尾</p><p>轮了nums[i]才会轮到队尾的元素，换句话说就是<strong>队尾元素不可能成为窗口最大值</strong></p><p>2.当<strong>nums[i]&lt;=队尾</strong>时，此时可以让队列保持单调递增(非严格)，nums[i]直接加入队尾。</p><p>因为队尾的元素&gt;=nums[i]，还是有可能成为最大值的，试想一下窗口只剩下 <strong>[队尾，nums[i]]</strong></p><p>因此队尾是一定要保留的，而nums[i]也要加入，因为后面可能有比nums[i]更小的！</p><p><strong>当有元素要弹出时是从队头弹出的：</strong></p><p>维护窗口的过程中，总有元素从左边退出。若该元素是队头元素就要弹出，因为单调队列维护的是<strong>窗口本身的可能的最大值</strong>，所以肯定要与窗口同步的；那不是队头的元素弹出窗口为何不用管？因为这些元素弹出不会影响窗口的最大值，eg:[1, 3, -1, -2]，此时-2要加入窗口，1要弹出窗口；此时队列尾[3, -1，-2]，最大值始终还是3，而1的位置在3出现之时已经不可能成为窗口最大值，谁叫她数值小并且先于3出现！因此1的退出不会影响窗口的最大值，而3的退出就会使得最大值从3变为-1。好好思考一下…</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值</span></span><br><span class="line"><span class="comment">核心方法:单调双端队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 这里的长度可以通过举例子得到:len=4,k=2,窗口数目为3,即len-k+1</span></span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len - k + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 创建单调递增的队列(队尾-&gt;队头),队头为此时窗口的最大值</span></span><br><span class="line">    <span class="comment">// 如:队头[6,5,4,3,2]队尾,当nums[i]&gt;队尾元素时,为了维护递增的趋势将队尾元素弹出</span></span><br><span class="line">    <span class="comment">// 当且仅当nums[i]&lt;=队尾元素时,才可以维护队列的递增,此时nums[i]加入队尾</span></span><br><span class="line">    Deque&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 初始化窗口nums[0,k-1]入队</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty() &amp;&amp; que.peekLast() &lt; nums[i]) que.pollLast();</span><br><span class="line">        <span class="comment">// 当且仅当nums[i]&lt;=队尾元素时或者que为空时nums[i]入队</span></span><br><span class="line">        que.addLast(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录最大值的数组索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    res[index++] = que.peekFirst();</span><br><span class="line">    <span class="comment">// 遍历后序窗口的最大值(以窗口结束索引为标记)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> k; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="comment">// 加入nums[j]同时维护递增队列</span></span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty() &amp;&amp; nums[j] &gt; que.peekLast()) que.pollLast();</span><br><span class="line">        que.addLast(nums[j]);</span><br><span class="line">        <span class="comment">// 弹出nums[j-k]同时维护窗口元素对应</span></span><br><span class="line">        <span class="keyword">if</span>(nums[j - k] == que.peekFirst()) que.pollFirst();</span><br><span class="line">        <span class="comment">// 记录当前窗口的最大值进res(这里只是弹出来看看最大值是多少,不要真的弹出来了)</span></span><br><span class="line">        res[index++] = que.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-剑指-Offer-59-II-队列的最大值"><a href="https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/">2.剑指 Offer 59 - II. 队列的最大值</a></h3><p>请定义一个队列并实现函数 max_value 得到队列里的最大值。</p><p>要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p><p>若队列为空，pop_front 和 max_value 需要返回 -1</p><p>输入:</p><p>[“MaxQueue”,“push_back”,“push_back”,“max_value”,“pop_front”,“max_value”]</p><p>[[],[1],[2],[],[],[]]</p><p>输出:</p><p>[null,null,null,2,1,2]</p><p><strong>思路：</strong></p><p>​    <strong>单调递增队列O(1)内找出最大值</strong>:</p><p>​    利用单调队列维护当前队列中的可能的最大值，然后可以以O(1)的时间复杂度内返回最大值</p><p>​    注意：</p><p>1.增删元素保持两个队列元素同步</p><p>2.每当执行队列的方法时都要进行判空操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 能获取最大值的队列类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxQueue</span> &#123;</span><br><span class="line">    <span class="comment">// 普通队列:按顺序存储所有元素</span></span><br><span class="line">    Deque&lt;Integer&gt; que;</span><br><span class="line">    <span class="comment">// 单调递增队列:用于维护当前队列中的最大值</span></span><br><span class="line">    Deque&lt;Integer&gt; maxQue;</span><br><span class="line">    <span class="comment">/*构造器*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        maxQue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取最大值*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max_value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 最大值就是maxQue的队头元素(别忘了判空)</span></span><br><span class="line">        <span class="keyword">return</span> maxQue.isEmpty() ? -<span class="number">1</span> : maxQue.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从队尾加入元素*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_back</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 加入元素:que直接加,maxQue要保持队列非严格递增(队尾-&gt;队头)</span></span><br><span class="line">        que.add(value);</span><br><span class="line">        <span class="keyword">while</span> (!maxQue.isEmpty() &amp;&amp; value &gt; maxQue.peekLast()) maxQue.pollLast();</span><br><span class="line">        <span class="comment">// 弹出队尾比value小的值后,value加入队尾,保持maxQue单增</span></span><br><span class="line">        maxQue.addLast(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*从队头弹出元素*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop_front</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 移除元素:que直接移除,maxQue要保持与que同步</span></span><br><span class="line">        <span class="comment">// 不存在就要弹出-1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">poll</span> <span class="operator">=</span> que.isEmpty() ? -<span class="number">1</span> : que.pollFirst();</span><br><span class="line">        <span class="comment">// 这里也要判空</span></span><br><span class="line">        <span class="keyword">if</span>(poll != -<span class="number">1</span> &amp;&amp; poll == maxQue.peekFirst()) maxQue.pollFirst();</span><br><span class="line">        <span class="keyword">return</span> poll;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">单调队列可以以O(1)时间复杂度内维护出某个窗口的最值</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="单调队列" scheme="https://www.fomal.cc/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>回溯算法专题</title>
    <link href="https://www.fomal.cc/posts/7e6eaabb.html"/>
    <id>https://www.fomal.cc/posts/7e6eaabb.html</id>
    <published>2022-08-12T06:39:25.000Z</published>
    <updated>2022-09-08T12:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯算法的两种写法">回溯算法的两种写法</h2><p><strong>题目描述（面试题）</strong>：为了迎接新同学的加入，小飞飞组织了丰富多彩的活动，这一次他随机在区的树篱迷宫中放置了一个奖品，请帮助同学以最快的速度找到奖品吧。树篱迷宫是一个4x4的正方形，用一个二维数组来表示，其中0代表可以走的路，1代表树篱不可行走，8表示奖品。迷宫有一到多个入口，且随机分布。请帮助新人找出到奖品的最短路径并输出。</p><p><strong>思路</strong>：咋一看这题数据范围小得离谱，只有4*4=16种情况，即使是指数级别的时间复杂度也能接受。求最短路的问题一般有：记忆化搜索、动态规划、BFS、Dijkstra、Floyd等方法，但是这道题要求出最短的路径是什么，涉及到这种路径上所有节点都要进行求解的，考虑用暴力回溯。我们可以枚举每个合法的出发点，从每个合法的出发点进行DFS搜索，搜索过程中可选的下一步为：上下左右&amp;&amp;合法；同时为了避免走回头路导致StackOverFlow要当前轮搜索过的节点进行标记，搜索的同时要进行记录，搜索完了要进行撤回。那么出口只有一个，那就是找到礼品了，退出的时候我们记录当前记录的长度并与之前的比较，当且仅当长度比之前的小才是最短路径。</p><p><strong>时间复杂度:O(N^3) 空间复杂度:O(N^2)</strong></p><h3 id="写法1：先处理再进行dfs">写法1：先处理再进行dfs</h3><p>先处理完再进行DFS的方式，要求在每个DFS进行之前就进行处理（标记访问+记录数据），每个DFS结束之后要进行对应的撤回（注意是每个DFS方法），这样才能保证遍历该层的下一个选择时是正确的状态。</p><p>PS：其实这题还可以进行一些剪枝处理加速：比如从某个边缘出发点到达不是这个出发点的边缘的情况可以进行剪枝加速。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] grid = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = winMaze(grid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res存储当前遍历到的最短路径，cur存储当前正在遍历的路径</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;   <span class="comment">// 当前找到的最短路径长度，初始化为INF</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;  <span class="comment">// 方向向量</span></span><br><span class="line">    <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">4</span>][<span class="number">4</span>];    <span class="comment">// 标记是否被访问</span></span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; winMaze(<span class="type">int</span>[][] _grid) &#123;</span><br><span class="line">        grid = _grid;</span><br><span class="line">        <span class="comment">// 枚举每个合法起点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 仅仅边缘且可以走的格子才进行dfs</span></span><br><span class="line">                <span class="keyword">if</span> ((i == <span class="number">0</span> || i == <span class="number">3</span> || j == <span class="number">0</span> ||j == <span class="number">3</span>) &amp;&amp; grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    vis[i][j] = <span class="literal">true</span>;   <span class="comment">// 进入dfs之前就进行标记和处理</span></span><br><span class="line">                    cur.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                    dfs(i, j);</span><br><span class="line">                    vis[i][j] = <span class="literal">false</span>;   <span class="comment">// dfs完成之后再撤回</span></span><br><span class="line">                    cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// base case -&gt; 找到礼品了</span></span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">// 当且仅当找到更短的路径才进行保存</span></span><br><span class="line">            <span class="keyword">if</span> (cur.size() &lt; min) &#123;</span><br><span class="line">                res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur);</span><br><span class="line">                min = cur.size();   <span class="comment">// 更新当前最短长度</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历下一步能到的格子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newJ = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 没有越界&amp;&amp;没有访问过&amp;&amp;可行的</span></span><br><span class="line">            <span class="keyword">if</span> (newI &gt;= <span class="number">0</span> &amp;&amp; newI &lt; <span class="number">4</span> &amp;&amp; newJ &gt;= <span class="number">0</span> &amp;&amp; newJ &lt; <span class="number">4</span> &amp;&amp; !vis[newI][newJ] &amp;&amp; grid[newI][newJ] != <span class="number">1</span>) &#123;</span><br><span class="line">                vis[newI][newJ] = <span class="literal">true</span>; <span class="comment">// 进入dfs之前就进行标记和处理</span></span><br><span class="line">                cur.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newI, newJ&#125;);</span><br><span class="line">                dfs(newI, newJ);</span><br><span class="line">                vis[newI][newJ] = <span class="literal">false</span>;    <span class="comment">// 撤回</span></span><br><span class="line">                cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="2-写法二：在dfs内部进行处理">2:写法二：在dfs内部进行处理</h3><p>这种在dfs内部处理的方式，在DFS一开始就要进行处理（标记访问+记录数据），DFS结束之前要进行撤回（注意出口可能不止一处），保证DFS函数执行完后当前的递归树深度不变。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] grid = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = winMaze(grid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : res) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// res存储当前遍历到的最短路径，cur存储当前正在遍历的路径</span></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;   <span class="comment">// 当前找到的最短路径长度，初始化为INF</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;  <span class="comment">// 方向向量</span></span><br><span class="line">    <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">4</span>][<span class="number">4</span>];    <span class="comment">// 标记是否被访问</span></span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; winMaze(<span class="type">int</span>[][] _grid) &#123;</span><br><span class="line">        grid = _grid;</span><br><span class="line">        <span class="comment">// 枚举每个合法起点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 仅仅边缘且可以走的格子才进行dfs</span></span><br><span class="line">                <span class="keyword">if</span> ((i == <span class="number">0</span> || i == <span class="number">3</span> || j == <span class="number">0</span> || j == <span class="number">3</span>) &amp;&amp; grid[i][j] == <span class="number">0</span>) dfs(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// dfs最开始进行标记+记录</span></span><br><span class="line">        vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">        cur.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">        <span class="comment">// base case -&gt; 找到礼品了</span></span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">// 当且仅当找到更短的路径才进行保存</span></span><br><span class="line">            <span class="keyword">if</span> (cur.size() &lt; min) &#123;</span><br><span class="line">                res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur);</span><br><span class="line">                min = cur.size();   <span class="comment">// 更新当前最短长度</span></span><br><span class="line">            &#125;</span><br><span class="line">            vis[i][j] = <span class="literal">false</span>;    <span class="comment">// dfs结束之前要撤回</span></span><br><span class="line">            cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历下一步能到的格子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newJ = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 没有越界&amp;&amp;没有访问过&amp;&amp;可行的</span></span><br><span class="line">            <span class="keyword">if</span> (newI &gt;= <span class="number">0</span> &amp;&amp; newI &lt; <span class="number">4</span> &amp;&amp; newJ &gt;= <span class="number">0</span> &amp;&amp; newJ &lt; <span class="number">4</span> &amp;&amp; !vis[newI][newJ] &amp;&amp; grid[newI][newJ] != <span class="number">1</span>) &#123;</span><br><span class="line">                dfs(newI, newJ);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[i][j] = <span class="literal">false</span>;    <span class="comment">// dfs结束之前要撤回</span></span><br><span class="line">        cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="回溯例题：LC679-24点游戏"><a href="https://leetcode.cn/problems/24-game/"><strong>回溯例题：LC679.24点游戏</strong></a></h2><p>​    <strong>回溯法暴力遍历</strong>:(参考官方题解)</p><p>​    括号可以直接忽略,因为暴力遍历已经包含所有运算次序</p><p>​    4*3*4*3*2*4*2*1*4=9216种可能性</p><p>​    1.这个游戏的本质就是将其中两个数进行相乘的结果重新加入并进行新一轮原来的24点计算</p><p>​    2.排除几种特殊情况:</p><p>2.1 除0计算:这种情况直接跳过</p><p>​    2.2 乘法与加法的运算可以进行剪枝</p><p>​        2.3 误差考虑:当误差&lt;1e-6时,认为就是0</p><p>​    3.若最终都没有返回true说明找不到最后返回false</p><p>​    时间复杂度与空间复杂度均为:O(1)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算误差</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">1e-6</span>;</span><br><span class="line">    <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">TARGET</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">    <span class="comment">// 加减乘除</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PLUS</span> <span class="operator">=</span> <span class="number">0</span>, MULTIPLY = <span class="number">1</span>, SUBTRACT = <span class="number">2</span>, DIVIDE = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    判断是否能凑成24</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judgePoint24</span><span class="params">(<span class="type">int</span>[] cards)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : cards) &#123;</span><br><span class="line">            list.add((<span class="type">double</span>)num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    dfs主函数:返回list中是否能计算出24</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(List&lt;Double&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归出口1:空列表</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归出口2:运算结果为24</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">1</span> &amp;&amp; Math.abs(list.get(<span class="number">0</span>) - TARGET) &lt; ERROR) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先抽出两个要进行运算的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                <span class="comment">// 注意是索引不同的两个数才能进行运算</span></span><br><span class="line">                <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">                    <span class="comment">// 再创建一个列表存放剩余的元素</span></span><br><span class="line">                    List&lt;Double&gt; remain = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; size; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k != i &amp;&amp; k != j) &#123;</span><br><span class="line">                            remain.add(list.get(k));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 在对选中的两个数list[i]与list[j]进行计算并加入remain列表</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="comment">// 加法与除法进行剪枝(只保留i&gt;j部分一半)</span></span><br><span class="line">                        <span class="keyword">if</span>(k &lt; <span class="number">2</span> &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(k == PLUS) &#123;</span><br><span class="line">                            remain.add(list.get(i) + list.get(j));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == MULTIPLY) &#123;</span><br><span class="line">                            remain.add(list.get(i) * list.get(j));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == SUBTRACT) &#123;</span><br><span class="line">                            remain.add(list.get(i) - list.get(j));</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == DIVIDE) &#123;</span><br><span class="line">                            <span class="comment">// 排除除0的情形</span></span><br><span class="line">                            <span class="keyword">if</span>(list.get(j) &lt; ERROR) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                remain.add(list.get(i) / list.get(j));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 将加入运算结果的remain列表进行递归运算,若得到24直接返回true</span></span><br><span class="line">                        <span class="keyword">if</span>(dfs(remain)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 撤回操作刚刚的添加操作继续下一种符号的运算</span></span><br><span class="line">                        remain.remove(remain.size() - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若最后都找不到正确的选项,说明就是没有了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一点思考：</strong></p><p>其实回溯本质上就是递归+回退从而找到所有的路径(组合的可能)，最关键的就是要找到<strong>子问题</strong></p><p>问题：<strong>n个数进行组合运算能否得出24这个结果</strong></p><p>开始是4个数进行运算[1,2,3,4]</p><p>选其中两个数尝试，例如选了selected=[1,3]，剩余的是remain=[2,4]</p><p>那么将selected中的两个数进行 [+, -, *, /] 4种运算得到的结果[4, -2, 3 , 0.3333…]分别再次放入remain中</p><p><strong>判断这3个数进行运算的结果是否能得到24？</strong></p><p><strong>子问题由此产生：由4个数字的组合变成了3个数字的组合</strong></p><p><strong>若3个数字的组合能算出24可以马上推出4个数字的组合能就算出24！</strong></p><p>此时我们重复调用原本的函数就能解决这个3个数能否组成24的问题了→这就是递归！</p><p>在递归过程有不合格的案例进行回退并往另一条路径走，这就是回溯了！</p><p>例如我通过1+3=4，而[2,4,4]通过递归发现<strong>不能</strong>使得结果为24，因此这种情况就要<strong>舍弃</strong>了</p><p>怎样进行舍弃?</p><p>很简单，将[2,4,4]最后加入元素删掉就相当于返回上一层，可以继续进行下一个运算符的计算，再放进去[2,4]里面进行递归…</p><p>若某个dfs([x,x,x])返回true就说明这条路径是可行的</p>]]></content>
    
    
    <summary type="html">回溯本质上就是递归+回退从而找到所有的路径(组合的可能)，最关键的就是要找到子问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="回溯" scheme="https://www.fomal.cc/tags/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="递归" scheme="https://www.fomal.cc/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二分查找模板</title>
    <link href="https://www.fomal.cc/posts/70e223cf.html"/>
    <id>https://www.fomal.cc/posts/70e223cf.html</id>
    <published>2022-08-12T06:28:18.000Z</published>
    <updated>2022-08-12T06:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找要求数据有二段性，可以将查找某个分割点的时间复杂度从O(N)加速至O(logN)</p><p><a href="https://leetcode-cn.com/problems/binary-search/"><strong>LC704. 二分查找</strong></a></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target</p><p>写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p><strong>示例1:</strong><br>输入： nums = [-1,0,3,5,9,12], target = 9 输出：4<br>解释：9出现在 nums中并且下标为4<br><strong>示例2:</strong><br>输入：nums = [-1,0,3,5,9,12],target = 2 输出：-1<br>解释：2不存在nums中因此返回-1</p><p><strong>思路：</strong></p><p><strong>二分查找-&gt;梦开始的地方</strong></p><p>这道题是二分查找的入门题目，二分查找的水非常深，但是简单的题目通常会由于各种原因丢分。</p><p>这里我总结一下二分查找的一些模板和做题套路</p><p>首先能用二分查找的<strong>前提</strong>是在<strong>可以根据f(mid)的值来判断下一个合法区间在mid左边还是右边</strong></p><p>因此二分查找前面通常都会有<strong>排序</strong>等步骤来确保问题具有**“二段性”**</p><p>总体要注意的：</p><p>1.while (l &lt; r)： 这种写法使得退出条件是<strong>l==r</strong>，因此执行完之后必定有l==r</p><p>2.mid的求法： 这个mid的求法非常讲究，我总结的是</p><ul><li>mid = l + (r - l + 1) / 2，mid主动偏右-&gt;右边界主动收缩r = mid - 1;</li><li>mid = l + (r - l ) / 2，mid主动偏左-&gt;左边界主动收缩l = mid + 1;</li></ul><p>3.下一个区间的判断采用减治思想，将一定不符合条件的先排除，如：nums[mid] &gt; target，那么mid必定不符合题意！-&gt;r = mid - 1</p><p>然后另外一个区间是其反面，一般是将合法区间包含在边界，如：nums[mid] &lt;=target，那么mid可能不符合题意！-&gt;l = mid</p><p>4.退出循环的时候要重复利用好l==r这个条件，答案蕴藏在其中！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        在升序数组中查找目标数字对应下标-&gt;二分查找</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="comment">// 下面是右边主动收缩</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// &gt;target,说明target在左边(不含)</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// &lt;=target,说明target在右边(含)</span></span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// l==r,nums[l]要不就是target;要不就是nums中没有target</span></span><br><span class="line">        <span class="keyword">return</span> nums[l] == target ? l : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二分查找要求数据有二段性，可以将查找某个分割点的时间复杂度从O(N)加速至O(logN)</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="https://www.fomal.cc/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>状态机DP总结</title>
    <link href="https://www.fomal.cc/posts/baa972ab.html"/>
    <id>https://www.fomal.cc/posts/baa972ab.html</id>
    <published>2022-08-12T06:17:05.000Z</published>
    <updated>2022-08-12T06:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>状态机DP就是考虑到当前时刻、位置等，有可能处于有限种情形中的其中一种</strong></p><p><strong>比如说当前位置的房子涂了什么颜色、当前时间的股票处于卖出还是买入的状态、当前删除到的序列是以0还是以1结尾、当前位置是放了还是没有放置东西、当前位置是正还是负</strong></p><p><strong>把这些情况分开来转移可以使得转移的思路更加清晰明了，类比成当前位置 i 的一个状态 j 能够由前面位置 i-1 的指定状态 k 转移得到！！！</strong></p><h3 id="1-粉刷房子问题">1.粉刷房子问题</h3><h4 id="1-1-LC123-剑指-Offer-II-091-粉刷房子">1.1 <strong>LC123.剑指 Offer II 091. 粉刷房子</strong></h4><p><strong>分状态的DP问题(序列DP):</strong></p><p>1.状态定义:dp[i][0],dp[i][1],dp[i][2]分别为粉刷房子[0,i],且房子i的颜色粉刷为红色/蓝色/绿色所花费的最低费用</p><p>​            <strong>为什么还要带一个后缀?因为粉刷第i间房子可能的状态本身有3种!</strong></p><p>​            <strong>如果混在一起讨论非常复杂,分开讨论可以根据前面的状态分开转移就非常方便</strong></p><p>​            <strong>类似于股票问题-&gt;考虑第i天且第i天处于卖出还是买入状态方便转移!</strong></p><p>2.状态转移:由于相邻的两个房子颜色不能相同,因此根据dp[i-1][j]的状态分类转移即可</p><p>​         2.1 dp[i][0]可以由dp[i-1][1]与dp[i-1][2]加上cost[i][0]取最小值转移</p><p>​         2.2 dp[i][1]可以由dp[i-1][0]与dp[i-1][2]加上cost[i][1]取最小值转移</p><p>​         2.3 dp[i][2]可以由dp[i-1][0]与dp[i-1][1]加上cost[i][2]取最小值转移</p><p>意义就是我这间房子涂了颜色0,那么只能由前面涂了不是颜色0的进行转移且取最小值</p><p>3.初始化:初始化dp[0][0]=cost[0][0],dp[0][1]=cost[0][1],dp[0][2]=cost[0][2]</p><p>4.遍历顺序:i正序,j无所谓</p><p>5.返回形式:涂到最后一间房子最小费用不知道是以哪种颜色结尾的,可以取最小值min(dp[n-1][0],dp[n-1][1],dp[n-1][2])</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> costs.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = costs[i][<span class="number">0</span>] + Math.min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = costs[i][<span class="number">1</span>] + Math.min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = costs[i][<span class="number">2</span>] + Math.min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[n - <span class="number">1</span>][<span class="number">0</span>], Math.min(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-LC1473-粉刷房子-III">1.2 <strong>LC1473. 粉刷房子 III</strong></h4><p>状态机DP问题(参考剑指OfferII.91  粉刷房子):</p><p>其实与之前那道粉刷房子的也很类似,不过这里更加复杂一点就是要考虑形成的街区数目,同时有的房子已经涂了色</p><p>我们前面一道题是考虑到两个dp维度:房子位置i,第i间房子的颜色j</p><p>要同时考虑形成的街区数目(独立),此时必须增加一个dp的维度k,表示当前形成的街区数目</p><p>同时要对已经涂了色的情况进行分类讨论转移</p><p><strong>1.状态定义:</strong> dp[i][j][k]为考虑对房子[0,i]进行涂色,且房子i(i∈[0,m-1])颜色被涂为颜色j(j∈[1,n]),且涂完之后就形成k(k∈[1,target])个街区的最小花费</p><p><strong>2.状态转移:</strong> 我们以house[i]是否为0进行分类讨</p><p>​      2.1 house[i]==0 表示房子i还没有被涂色,选择任意颜色j∈[1,n]对房子i进行涂色,涂的具体颜色会影响街区的数目</p><p>​          dp[i][j][k]=cost[i][j-1]+min(dp[i-1][j][k],dp[i-1][j’][k-1]) 其中j’为≠j的集合(颜色不同街区数+1)</p><p>​          注意细节:合法的dp[i-1][jj][?]状态才能转移</p><p>​      2.2 house[i]!=0 表示房子i已经被涂色,此时只能对dp[i][house[i]][k]进行转移,其他dp[i][j’][?]无法转移仍为INF</p><p>​          dp[i][houses[i]][k]=0+min(dp[i-1][houses[i]][k],dp[i-1][j’][k-1]) 其中j’为≠houses[i]的集合(颜色不同街区数+1)</p><p><strong>3.初始化:</strong> 首先全部初始化为INF表示没有转移</p><p>​      当houses[0]==0时,dp[0][j][1]=cost[0][j-1] -&gt; 要涂色</p><p>​      当houses[0]!=0时,dp[0][houses[0]][1]=0 -&gt; 不用涂色</p><p><strong>4.遍历顺序:</strong> 显然i正序,j无所谓,k正序</p><p><strong>5.返回形式:</strong> 最后返回min(dp[m-1][j][target]),j∈[1,n] 若扔没有转移则返回-1</p><p><strong>时间复杂度:O((mn)^2) 空间复杂度:O(n*m^2)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[] houses, <span class="type">int</span>[][] cost, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;   <span class="comment">// 哨兵</span></span><br><span class="line">    <span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            Arrays.fill(dp[i][j], INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (houses[<span class="number">0</span>] != <span class="number">0</span>) &#123;   <span class="comment">// 1.首个房子不用涂色</span></span><br><span class="line">        dp[<span class="number">0</span>][houses[<span class="number">0</span>]][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 2.首个房子要涂色,费用最小就是直接涂,且只能形成一个街区</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j][<span class="number">1</span>] = cost[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历dp的每个状态</span></span><br><span class="line">    <span class="comment">// i∈[1,m-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="comment">// j∈[1,n]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">// k∈[1,target]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= target; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (houses[i] == <span class="number">0</span>) &#123;   <span class="comment">// 1.houses[i]要涂色</span></span><br><span class="line">                    <span class="comment">// 遍历所有可能的houses[i-1]的颜色进行转移</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">jj</span> <span class="operator">=</span> <span class="number">1</span>; jj &lt;= n; jj++) &#123;</span><br><span class="line">                        <span class="comment">// 细节:只有有效的状态才能进行转移</span></span><br><span class="line">                        <span class="keyword">if</span> (jj == j &amp;&amp; dp[i - <span class="number">1</span>][jj][k] != INF) &#123;  <span class="comment">// 与前面颜色相同,街区数目不变</span></span><br><span class="line">                            dp[i][j][k] = Math.min(dp[i][j][k], cost[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][jj][k]);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jj != j &amp;&amp; dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>] != INF) &#123;    <span class="comment">// 与前面颜色不同,街区数目+1</span></span><br><span class="line">                            dp[i][j][k] = Math.min(dp[i][j][k], cost[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 2.houses[i]已经被涂色</span></span><br><span class="line">                    <span class="keyword">if</span> (j == houses[i]) &#123;   <span class="comment">// 只能转移j==houses[i]的状态</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">jj</span> <span class="operator">=</span> <span class="number">1</span>; jj &lt;= n; jj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (jj == j &amp;&amp; dp[i - <span class="number">1</span>][jj][k] != INF) &#123;  <span class="comment">// 与前面颜色相同,街区数目不变(且不用花费)</span></span><br><span class="line">                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - <span class="number">1</span>][jj][k]);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jj != j &amp;&amp; dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>] != INF) &#123;    <span class="comment">// 与前面颜色不同,街区数目+1(且不用花费)</span></span><br><span class="line">                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - <span class="number">1</span>][jj][k - <span class="number">1</span>]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结果为min(dp[m-1][j][target]),j∈[1,n] 不为INF部分的最小值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        res = Math.min(res, dp[m - <span class="number">1</span>][j][target]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res == INF ? -<span class="number">1</span> : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6种股票问题">2.6种股票问题</h3><h4 id="2-1-LC121-买卖股票的最佳时机">2.1 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/"><strong>LC121. 买卖股票的最佳时机</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dp五部曲:主要根据每天持有与不持有股票的状态进行转移</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][0]代表第i天(操作后)不持有股票的最大身价,dp[i][0]代表第i天(操作后)持有股票的最大身价</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.1 dp[i][0]第i天不持有股票</span></span><br><span class="line"><span class="comment">                1.当天卖了:dp[i-1][1]+prices[i]</span></span><br><span class="line"><span class="comment">                2.之前就卖了:dp[i-1][0]</span></span><br><span class="line"><span class="comment">                3.还没买:0 (可以忽略)</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][0]</span></span><br><span class="line"><span class="comment">            2.2  dp[i][1]第i天持有股票</span></span><br><span class="line"><span class="comment">                1.当天入手:-prices[i]</span></span><br><span class="line"><span class="comment">                2.之前就入手了:dp[i-1][1]</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][1]</span></span><br><span class="line"><span class="comment">        3.初始化:第0天的情况-&gt;dp[0][0]=0,dp[0][1]=-prices[0]</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:最后一天肯定是卖出股票的身价大-&gt;dp[len-1][0];</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(-prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-LC122-买卖股票的最佳时机-II">2.2 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/"><strong>LC122. 买卖股票的最佳时机 II</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dp解法:</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][0]代表第i天(操作后)不持有股票的最大身价,dp[i][0]代表第i天(操作后)持有股票的最大身价</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.1 dp[i][0]第i天不持有股票</span></span><br><span class="line"><span class="comment">                1.当天卖了:dp[i-1][1]+prices[i]</span></span><br><span class="line"><span class="comment">                2.之前就卖了:dp[i-1][0]</span></span><br><span class="line"><span class="comment">                3.还没买:0 (可以忽略)</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][0]</span></span><br><span class="line"><span class="comment">            2.2  dp[i][1]第i天持有股票</span></span><br><span class="line"><span class="comment">                1.当天入手:dp[i-1][0]-prices[i] (区别在此,之前不持有股票可能已经交易过几轮了)</span></span><br><span class="line"><span class="comment">                2.之前就入手了:dp[i-1][1]</span></span><br><span class="line"><span class="comment">            取最大值转移值dp[i][1]</span></span><br><span class="line"><span class="comment">        3.初始化:第0天的情况-&gt;dp[0][0]=0,dp[0][1]=-prices[0]</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:最后一天肯定是卖出股票的身价大-&gt;dp[len-1][0]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-LC123-买卖股票的最佳时机-III">2.3 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/"><strong>LC123. 买卖股票的最佳时机 III</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        总体思路:第i天有5个阶段:0.还没买 1.第一次买入后 2.第一次抛售后 3.第二次迈买入后 4.第二次抛售后</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][0]为处于的阶段0最大身价;dp[i][1]为处于阶段1最大身价;....</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.1 阶段0身价恒为0</span></span><br><span class="line"><span class="comment">            2.2 阶段1有两种情况:当天第一次买和之前第一次买了,取大的值:max(dp[i-1][0]-prices[i],dp[i-1][1])</span></span><br><span class="line"><span class="comment">            2.3 阶段2有两种情况:当天第一次卖和之前第一次卖了,取大的值:max(dp[i-1][1]+prices[i],dp[i-1][2])</span></span><br><span class="line"><span class="comment">            2.3 阶段3有两种情况:当天第二次买和之前第二次买了,取大的值:max(dp[i-1][2]-prices[i],dp[i-1][3])</span></span><br><span class="line"><span class="comment">            2.3 阶段4有两种情况:当天第二次卖和之前第二次卖了,取大的值:max(dp[i-1][3]+prices[i],dp[i-1][4])</span></span><br><span class="line"><span class="comment">        3.初始化:dp[0][0]=0,dp[0][1]=-prices[0],dp[0][2]=0,dp[0][3]=-prices[0],dp[0][4]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:第一次卖出与第二次卖出取最大值:max(dp[len-1][2],dp[len-1][4])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">3</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">2</span>], dp[len - <span class="number">1</span>][<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-LC188-买卖股票的最佳时机-IV">2.4 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/"><strong>LC188. 买卖股票的最佳时机 IV</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        总体思路:与买卖股票的最佳时机 III 接近,将买卖股票的阶段分为第x次买入和第x次卖出</span></span><br><span class="line"><span class="comment">        状态0:处于还没买入过的阶段</span></span><br><span class="line"><span class="comment">        状态1:处于第1次买入后的阶段</span></span><br><span class="line"><span class="comment">        状态2:处于第1次卖出后的阶段</span></span><br><span class="line"><span class="comment">        状态3:处于第2次买入后的阶段</span></span><br><span class="line"><span class="comment">        状态4:处于第2次卖出后的阶段</span></span><br><span class="line"><span class="comment">        ...以此类推,dp[i][j]中的i代表的是处于第i天,j代表的当前股票的状态</span></span><br><span class="line"><span class="comment">        j为奇数时,表示处于第j/2+1次买入股票阶段;j为偶数时,表示处于第j/2次卖出股票阶段</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][j]代表第i天处于的状态j时的最大收益</span></span><br><span class="line"><span class="comment">        2.状态转移:参考状态1与2可以推导出后面的</span></span><br><span class="line"><span class="comment">            2.0 还没买入过的阶段(j=0)-&gt;恒为0(直接初始化为0就可以完成求解)</span></span><br><span class="line"><span class="comment">            2.1 第1次买入后的阶段(j=1):今天刚买与之前就买了取较大值-&gt;max(dp[i-1][0]-prices[i],dp[i-1][1])</span></span><br><span class="line"><span class="comment">            2.2 第1次卖出后的阶段(j=2):今天刚卖与之前就卖了取较大值-&gt;max(dp[i-1][1]+prices[i],dp[i-1][2])</span></span><br><span class="line"><span class="comment">            ...以此类推,那么dp[i][j]可以以j为依据分为两种情况进行转移计算:</span></span><br><span class="line"><span class="comment">            j为奇数时-&gt;dp[i][j]=max(dp[i-1][j-1]-prices[i],dp[i-1][j])</span></span><br><span class="line"><span class="comment">            j为偶数时-&gt;dp[i][j]=max(dp[i-1][j-1]+prices[i],dp[i-1][j])</span></span><br><span class="line"><span class="comment">        3.初始化:j奇数表示买入的状态-&gt;dp[0][j]=-prices[0],j奇偶表示卖出的状态-&gt;dp[0][j]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:返回dp[len-1][j]其中j为偶数的最大值(卖出时身价比持有时大)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length == <span class="number">0</span> || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span> * k + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = -prices[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 统计j为奇数的情况:奇数+1就是偶数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j - <span class="number">1</span>] - prices[i], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                dp[i][j + <span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j] + prices[i], dp[i - <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">            max = Math.max(max, dp[len - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-LC309-最佳买卖股票时机含冷冻期">2.5 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/"><strong>LC309. 最佳买卖股票时机含冷冻期</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        总体思路:与最佳买卖股票II比较类似,可以无限次交易但是含有冷冻期</span></span><br><span class="line"><span class="comment">        一共有以下6个状态:</span></span><br><span class="line"><span class="comment">        状态0:当前还没操作股票</span></span><br><span class="line"><span class="comment">        状态1:今天刚买入</span></span><br><span class="line"><span class="comment">        状态2:之前就买入了</span></span><br><span class="line"><span class="comment">        状态3:今天刚卖出</span></span><br><span class="line"><span class="comment">        状态4:处于冷冻期</span></span><br><span class="line"><span class="comment">        状态5:之前卖出且过了冷冻期</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][j]表示第i天处于状态j的最大收益</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.0 dp[i][0]=0</span></span><br><span class="line"><span class="comment">            2.1 dp[i][1]=max(dp[i-1][0]-prices[i],dp[i-1][5]-prices[i],dp[i-1][3]-prices[i])</span></span><br><span class="line"><span class="comment">                        =max(dp[i-1][5]-prices[i],dp[i-1][3]-prices[i])</span></span><br><span class="line"><span class="comment">            2.2 dp[i][2]=max(dp[i-1][1],dp[i-1][2])</span></span><br><span class="line"><span class="comment">            2.3 dp[i][3]=max(dp[i-1][2]+prices[i],dp[i-1][1]+prices[i])</span></span><br><span class="line"><span class="comment">            2.4 dp[i][4]=dp[i-1][3]</span></span><br><span class="line"><span class="comment">            2.5 dp[i][5]=max(dp[i-1][4],dp[i-1][5])</span></span><br><span class="line"><span class="comment">        3.初始化:dp[0][0]=0,dp[0][1]=-prices[0],dp[0][2]=-prices[0],dp[0][3]=dp[0][4]=dp[0][5]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:返回max(dp[len-1][3],dp[len][4],dp[len-1][5])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">6</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">5</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">4</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = dp[i - <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">            dp[i][<span class="number">5</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">4</span>], dp[i - <span class="number">1</span>][<span class="number">5</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[len - <span class="number">1</span>][<span class="number">3</span>], Math.max(dp[len - <span class="number">1</span>][<span class="number">4</span>], dp[len - <span class="number">1</span>][<span class="number">5</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-LC714-买卖股票的最佳时机含手续费">2.6 <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/"><strong>LC714. 买卖股票的最佳时机含手续费</strong></a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        与股票买卖II十分类似,唯一的不同就是要支付手续费,可以看做卖出的时候股票价格减少fee</span></span><br><span class="line"><span class="comment">        一共有2种状态:(其中没操作股票归纳到情况1)</span></span><br><span class="line"><span class="comment">        状态0:持有股票</span></span><br><span class="line"><span class="comment">        状态1:不持有股票</span></span><br><span class="line"><span class="comment">        1.状态定义:dp[i][j]代表的第i天处于状态j时的最大身价</span></span><br><span class="line"><span class="comment">        2.状态转移:</span></span><br><span class="line"><span class="comment">            2.0 持有股票,可能今天刚买或者之前就买了:dp[i][0]=max(dp[i-1][1]-prices[i],dp[i-1][0])</span></span><br><span class="line"><span class="comment">            2.1 不持有股票,可能今天刚卖或者之前就卖了:dp[i][1]=max(dp[i-1][1],dp[i-1][0]+prices[i]-fee)</span></span><br><span class="line"><span class="comment">        3.初始化:初始化dp[0][0]=-prices[0],dp[0][1]=0</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序,j任意</span></span><br><span class="line"><span class="comment">        5.返回形式:返回dp[len-1][1]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-LC926-将字符串翻转到单调递增">3.<a href="https://leetcode.cn/problems/flip-string-to-monotone-increasing/"><strong>LC926. 将字符串翻转到单调递增</strong></a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minFlipsMonoIncr</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动态规划:</span></span><br><span class="line"><span class="comment">        翻转后的单调递增字符串可能的情形有:000...000  000...111  111...111</span></span><br><span class="line"><span class="comment">        归结起来就是两种情形:以0结尾和以1结尾 分开来考虑转移会更加明确</span></span><br><span class="line"><span class="comment">        1.状态定义:f[i][0]为考虑s[0,i]翻转后为以0结尾的s[0,i]为递增序列最少翻转次数</span></span><br><span class="line"><span class="comment">                    f[i][1]为考虑s[0,i]翻转后为以1结尾的s[0,i]为递增序列最少翻转次数</span></span><br><span class="line"><span class="comment">        2.状态转移:要求f[i][0]与f[i][1]就要看s[i]</span></span><br><span class="line"><span class="comment">            2.1 s[i]==0时 f[i][0]=f[i-1][0]  f[i][1]=min(f[i-1][1],f[i-1][0])+1</span></span><br><span class="line"><span class="comment">            2.2 s[i]==1时 f[i][1]=min(f[i-1][0],f[i-1][1])  f[i][0]=f[i-1][0]+1</span></span><br><span class="line"><span class="comment">        3.初始化:f[0][0]=s[0]==0?0:1  f[0][1]=s[0]==1?0:1</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序</span></span><br><span class="line"><span class="comment">        5.返回形式:返回min(f[n-1][0],f[n-1][1]) 最后被翻转成0或者1结尾都有可能使得翻转次数最少</span></span><br><span class="line"><span class="comment">        时间复杂度:O(N)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = chs[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">1</span>] = chs[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chs[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                f[i][<span class="number">1</span>] = Math.min(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                f[i][<span class="number">1</span>] = Math.min(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(f[n - <span class="number">1</span>][<span class="number">0</span>], f[n - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-LC2320-统计放置房子的方式数">4.<a href="https://leetcode.cn/problems/count-number-of-ways-to-place-houses/"><strong>LC2320. 统计放置房子的方式数</strong></a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countHousePlacements</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        状态机DP问题(有更加简单的做法，这里为了演示状态机DP):</span></span><br><span class="line"><span class="comment">        1.状态定义:</span></span><br><span class="line"><span class="comment">            1.1 f[i][0]为考虑两边[0,i]的地方i位置上下都不放置房子的方案数</span></span><br><span class="line"><span class="comment">            1.2 f[i][1]为考虑两边[0,i]的地方i位置只放上面的地方</span></span><br><span class="line"><span class="comment">            1.3 f[i][2]为考虑两边[0,i]的地方i位置只放下面的地方</span></span><br><span class="line"><span class="comment">            1.4 f[i][3]为考虑两边[0,i]的地方i位置上下都放置房子的方案数</span></span><br><span class="line"><span class="comment">        2.状态转移:考虑i位置一共有4种状态,根据实际转移即可</span></span><br><span class="line"><span class="comment">            f[i][0]=f[i-1][3]+f[i-1][2]+f[i-1][1]+f[i-1][0]</span></span><br><span class="line"><span class="comment">            f[i][1]=f[i-1][2]+f[i-1][0]</span></span><br><span class="line"><span class="comment">            f[i][2]=f[i-1][1]+f[i-1][0]</span></span><br><span class="line"><span class="comment">            f[i][3]=f[i-1][0]</span></span><br><span class="line"><span class="comment">        3.初始化:f[0][0]=f[0][1]=f[0][2]=f[0][3]=1</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序</span></span><br><span class="line"><span class="comment">        5.返回形式:最后4种情形加起来就是答案sum(f[n-1][j])</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">long</span>[][] f = <span class="keyword">new</span> <span class="title class_">long</span>[n][<span class="number">4</span>];</span><br><span class="line">        Arrays.fill(f[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>] = (f[i - <span class="number">1</span>][<span class="number">3</span>] + f[i - <span class="number">1</span>][<span class="number">2</span>] + f[i - <span class="number">1</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">1</span>] = (f[i - <span class="number">1</span>][<span class="number">2</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">2</span>] = (f[i - <span class="number">1</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">3</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> ff : f[n - <span class="number">1</span>]) &#123;</span><br><span class="line">            res = (res + ff) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-LC552-学生出勤记录-II">5.<a href="https://leetcode.cn/problems/student-attendance-record-ii/"><strong>LC552. 学生出勤记录 II</strong></a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">checkRecord</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动态规划:</span></span><br><span class="line"><span class="comment">        按 总出勤 计，学生缺勤（&#x27;A&#x27;）严格 少于两天。</span></span><br><span class="line"><span class="comment">        那么可以将情况分为两种:0天或者1天A</span></span><br><span class="line"><span class="comment">        其中，1天的可以枚举A出现的天数，然后两边通过乘法原理进行求解次数</span></span><br><span class="line"><span class="comment">            0天的可以通过动态规划进行求解，因为只有L与P两种状态，合法情况为最多两个连续的L</span></span><br><span class="line"><span class="comment">        1.状态定义:由于第i天（从1开始）的选择被前两天i-1与i-2限制了，因此会多出两个维度f[i][pre][cur]</span></span><br><span class="line"><span class="comment">            因此定义f[i][0][0]为第i-1与i天选择为LL的情形数，f[i][0][1]为第i-1与i天选择为LP的情形数</span></span><br><span class="line"><span class="comment">                f[i][1][0]为第i-1与i天选择为PL的情形数，f[i][1][1]为第i-1与i天选择为PP的情形数</span></span><br><span class="line"><span class="comment">        2.状态转移:显然f[i][0][0]=f[i-1][1][0]，f[i][0][1]=f[i-1][0][0]+f[i-1][1][0]</span></span><br><span class="line"><span class="comment">                f[i][1][0]=f[i-1][0][1]+f[i-1][1][1]，f[i][1][1]=f[i-1][1][1]+f[i-1][0][1]</span></span><br><span class="line"><span class="comment">        3.初始化:f[2][0][0]=1，f[2][1][0]=1，f[2][0][1]=1，f[2][1][1]=1</span></span><br><span class="line"><span class="comment">        4.遍历顺序:i正序，其余任意</span></span><br><span class="line"><span class="comment">        5.返回形式:∑f[n][pre][cur]+有1个A的情形数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">long</span>[][][] f = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">1</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] + f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">0</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">1</span>] = (f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sum[i]表示长度为i天数不包含A的合法情形数</span></span><br><span class="line">        <span class="type">long</span>[] sum = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        sum[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 没有天数视为1</span></span><br><span class="line">        sum[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum[i] = (f[i][<span class="number">0</span>][<span class="number">0</span>] + f[i][<span class="number">0</span>][<span class="number">1</span>] + f[i][<span class="number">1</span>][<span class="number">0</span>] + f[i][<span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(Arrays.toString(sum));</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> sum[n];</span><br><span class="line">        <span class="comment">// 统计带A的合法情形数，其中i为A出现的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res = (res + (sum[i - <span class="number">1</span>] * sum[n - i]) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">状态机DP就是考虑到当前时刻、位置等，有可能处于有限种情形中的其中一种</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://www.fomal.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="状态机DP" scheme="https://www.fomal.cc/tags/%E7%8A%B6%E6%80%81%E6%9C%BADP/"/>
    
  </entry>
  
  <entry>
    <title>二维前缀和专题</title>
    <link href="https://www.fomal.cc/posts/b7f88f4c.html"/>
    <id>https://www.fomal.cc/posts/b7f88f4c.html</id>
    <published>2022-08-11T14:23:10.000Z</published>
    <updated>2022-08-11T14:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>二维前缀和模板：</strong></p><p><strong>一维前缀和:sum[i,j]=sum[j+1]-sum[i]</strong></p><p>将sum[i][j]看成是以 <strong>matrix[0][0]</strong> 为左上角顶点, <strong>matrix[i-1][j-1]</strong> 为右下角顶点的矩阵内所有元素的和</p><p><strong>初始化sum矩阵</strong>：sum[i + 1][j + 1] = sum[i][j + 1] + sum[i + 1][j] - sum[i][j] + matrix[i][j];</p><p><img src="../images/p21.jpg" alt="p21"></p><p><strong>区块求和:</strong> sumRegion(r1, c1, r2, c2)=sum[r2 + 1, c2 + 1] - sum[r1, c2 + 1] - sum[r2 + 1, c1] + sum[r1, c1]</p><p><img src="../images/p22.jpg" alt="p22"></p><p>也就是数说sum[i][j]是比matrix<strong>超前一位</strong>的</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        sum = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                sum[i + <span class="number">1</span>][j + <span class="number">1</span>] = sum[i][j + <span class="number">1</span>] + sum[i + <span class="number">1</span>][j] - sum[i][j] + matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求以(r1,c1)为左上角,(r2,c2)为右下角的区块和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> c1, <span class="type">int</span> r2, <span class="type">int</span> c2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[r2 + <span class="number">1</span>][c2 + <span class="number">1</span>] - sum[r1][c2 + <span class="number">1</span>] - sum[r2 + <span class="number">1</span>][c1] + sum[r1][c1];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二维前缀和是指数据维度有两个i与j，求解矩阵内某个矩形区域内数字和的问题是二维前缀和问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二维前缀和" scheme="https://www.fomal.cc/tags/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口专题</title>
    <link href="https://www.fomal.cc/posts/63fc9391.html"/>
    <id>https://www.fomal.cc/posts/63fc9391.html</id>
    <published>2022-08-11T14:20:42.000Z</published>
    <updated>2022-08-11T14:20:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1004-最大连续1的个数-III"><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/">1004. 最大连续1的个数 III</a></h2><p><strong>解题思路</strong></p><p><strong>重点：</strong> 题意转换。把「最多可以把 K 个 0 变成 1，求仅包含 1 的最长子数组的长度」转换为 「找出一个最长的子数组，该子数组内最多允许有 K 个 0 」。</p><p>经过上面的题意转换，我们可知本题是求最大连续子区间，可以使用滑动窗口方法。滑动窗口的限制条件是：窗口内最多有 K 个 0。</p><p><strong>代码思路：</strong></p><p>1.使用 l 和 r 两个指针，分别指向滑动窗口的左右边界。</p><p>2.<strong>r 主动右移：</strong> r 指针每次移动一步。当nums[r]为 0，说明滑动窗口内增加了一个 0；</p><p>3.<strong>l 被动右移：</strong> 判断此时窗口内 0 的个数，如果超过了 k，则 l 指针被迫右移，直至窗口内的 0 的个数小于等于 k 为止。</p><p>4.<strong>滑动窗口长度最大值</strong>就是所求。</p><p>示例：</p><p>以 A= [1,1,1,0,0,0,1,1,1,1,0], K = 2 为例，下面的动图演示了滑动窗口的两个指针的移动情况。</p><p>见 <a href="https://leetcode.cn/problems/max-consecutive-ones-iii/solution/fen-xiang-hua-dong-chuang-kou-mo-ban-mia-f76z/"><strong>1004. 最大连续1的个数 III - 负雪明烛 的题解</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">// 窗口中0的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>; r &lt; n; r++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[r] == <span class="number">0</span>) zero++; <span class="comment">// r主动右移形成新的窗口</span></span><br><span class="line">        <span class="comment">// 窗口内的0个数&gt;k代表不符合题意-&gt;此时l应被动移动至符合对应r要求的位置</span></span><br><span class="line">        <span class="keyword">while</span> (zero &gt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[l] == <span class="number">0</span>) zero--;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 维护每一轮r对应的窗口长度最大值就是res</span></span><br><span class="line">        res = Math.max(res, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分享滑动窗口模板</p><p>《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，我觉得非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚不动，把后脚移动过来；后脚不动，把前脚向前移动。</p><p>我分享一个滑动窗口的模板，能解决大多数的滑动窗口问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findSubArray(<span class="type">int</span>[] nums)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num.length; <span class="comment">// 数组or字符串长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;     <span class="comment">// 双指针，表示当前遍历的区间[l, r]，闭区间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 用于统计 子数组or子区间 是否有效，根据题目可能会改成求和or计数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// 保存最大的满足题目要求的 子数组or子串 长度</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt; n)&#123;     <span class="comment">// 当右边的指针没有搜索到 数组or字符串 的结尾</span></span><br><span class="line">        sum += nums[r]     <span class="comment">// 增加当前右边指针的数字or字符的求和or计数</span></span><br><span class="line">        <span class="keyword">while</span> 区间[l, r]不符合题意&#123;</span><br><span class="line">            sum -= nums[l] <span class="comment">// 移动左指针前需要从sum中减少l位置字符的求和or计数</span></span><br><span class="line">            l++ <span class="comment">// 真正的移动左指针，注意不能跟上面一行代码写反</span></span><br><span class="line">        &#125; <span class="comment">// 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line">        <span class="comment">// 到 while 结束时，我们找到了一个符合题意要求的 子数组or子串</span></span><br><span class="line">        res = Math.max(res, r - l + <span class="number">1</span>) <span class="comment">// 需要更新结果</span></span><br><span class="line">        r++ <span class="comment">// 移动右指针，去探索新的区间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>滑动窗口中用到了左右两个指针，它们移动的思路是：以右指针作为驱动，拖着左指针向前走。右指针每次只移动一步，而左指针在内部 while 循环中每次可能移动多步。右指针是主动前移，探索未知的新区域；左指针是被迫移动，负责寻找满足题意的区间。</strong></p><p><strong>模板的整体思想是：</strong></p><p>1.定义两个指针 l 和 r 分别指向区间的开头和结尾，注意是闭区间；定义 sum 用来统计该区间内的各个字符出现次数；</p><p>2.第一重 while 循环是为了判断 r 指针的位置是否超出了数组边界；当 r 每次到了新位置，需要增加 r 指针的求和/计数；</p><p>3.第二重 while 循环是让 l 指针向右移动到 [l, r] 区间符合题意的位置；当 l 每次移动到了新位置，需要减少 l 指针的求和/计数；</p><p>4.在第二重 while 循环之后，成功找到了一个符合题意的 [l, r] 区间，题目要求最大的区间长度，因此更新 res = max(res, 当前区间的长度) 。</p><p>5.r 指针每次向右移动一步，开始探索新的区间。</p><p>6.模板中的 sum 需要根据题目意思具体去修改，本题是求和题目因此把sum 定义成整数用于求和；如果是计数题目，就需要改成字典用于计数。当左右指针发生变化的时候，都需要更新 sum 。</p><p>7.另外一个需要根据题目去修改的是内层 while 循环的判断条件，即： 区间 [l, r] 不符合题意 。对于本题而言，就是该区间内的 0 的个数 超过了 2 。</p><p><strong>滑窗题目主要有两种类型：</strong></p><p>1.窗口大小固定，例如为10，这时候相当于左右边界必定严格同步移动。</p><p>2.左指针l不回退类型，这类型一般是新加入nums[r]使得回退必定不符合条件，旧的nums[r]已经不符合条件，这种也可以利用滑窗的思想求解。</p><p><strong>再来一道练习题：</strong></p><h2 id="LC209-长度最小的子数组"><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">LC209. 长度最小的子数组</a></h2><p>给定一个含有n个正整数的数组和一个正整数<code>target</code> 。<br>找出该数组中满足其和<code>≥ target</code> 的长度最小的连续子数组<code>〔numsl，numsl+1，...，numsr-1,numsr]</code>，并返回其长度。如果不存在符合条件的子数组，返回0。<br><strong>示例1:</strong><br>输入： target = 7, nums = [2,3,1,2,4,3] 输出：2<br>解释：子数组[4,3]是该条件下的长度最小的了教组。<br><strong>示例2:</strong><br>输入： target = 4，nums = [1,4,4] 输出：1<br><strong>示例3:</strong><br>输入： target = 11，nums = [1,1,1,1,1,1,1,1] 输出：0</p><p><strong>思路：</strong></p><p><strong>滑动窗口</strong>:</p><p>这一题最关键的字眼&quot;<strong>≥ target 的长度最小的 连续子数组</strong>&quot;</p><p>这个字眼可以联想到很多东西</p><p>1.<strong>连续</strong>子数组：是连续的，因此可以与<strong>前缀和</strong>进行结合（实际上sum变量是一种对于前缀和的优化写法，目的是快速计算窗口的和）</p><p>同时，连续子数组，<strong>左右指针</strong>为边界就可以确定一个连续子数组-&gt;<strong>滑动窗口</strong></p><p>因此这一题的的提示已经非常明确了，必定是用滑窗</p><p>2.长度最小：一般来说求最小长度这种全局最优状态，可以考虑<strong>动态规划</strong>或者<strong>一路维护</strong></p><p>这里用dp的话，状态就是nums[i]结尾的最大长度，显然不太合适，dp[i-1]与dp[i]没有很明显的联系</p><p>那么就需要一路维护，求出<strong>以nums[r]为右边界的窗口的最小长度，r∈[0,len-1]</strong></p><p>维护好nums[0]~nums[len-1]为右边界的合法窗口长度，就是全局的合法窗口最小值，也就是所求！！！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 滑窗:右指针主动右移,左指针被动右移</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 维护当前窗口[l,r]的总和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 主动移动右指针</span></span><br><span class="line">        <span class="keyword">for</span> (; r &lt; len; r++) &#123;</span><br><span class="line">            <span class="comment">// 计算当前窗口[l,r]的和:新加入的元素只有nums[r]</span></span><br><span class="line">            <span class="comment">// r指针可能要循环多次才能找到符合条件的[l,r],因为l右移至不符合sum&gt;=target</span></span><br><span class="line">            sum += nums[r];</span><br><span class="line">            <span class="comment">// 若窗口[l,r]满足条件,统计长度并尝试将其尽可能缩小,直至不符合题意</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                <span class="comment">// [l,r]符合条件,维护res</span></span><br><span class="line">                res = Math.min(res, r - l + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// l一直右移并统计,直至不满足条件</span></span><br><span class="line">                <span class="comment">// 这里有个很值得思考的点:为什么l指针可以义无反顾地移动至不符合条件的l+1?</span></span><br><span class="line">                <span class="comment">// [l,r]合法;[l+1,r]不合法,而[l,r+1]及更长的不可能被统计因为只统计短的</span></span><br><span class="line">                <span class="comment">// [l,r-1]以及更短的呢?右边界为r-1的情况已统计,因为l会直接移动到不合法且nums都为正数,因此窗口不可能继续缩小!</span></span><br><span class="line">                <span class="comment">// 所以此时l可以义无反顾地移动至l+1</span></span><br><span class="line">                sum -= nums[l++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若没有窗口符合条件就是0</span></span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>为什么l指针可以义无反顾地移动至不符合条件的l+1?滑窗精髓所在-&gt;减少不必要的计算</strong></p></blockquote>]]></content>
    
    
    <summary type="html">这篇文章分享一个滑动窗口的模板，能解决大多数的滑动窗口问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="滑窗" scheme="https://www.fomal.cc/tags/%E6%BB%91%E7%AA%97/"/>
    
    <category term="双指针" scheme="https://www.fomal.cc/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>状态压缩DP专题</title>
    <link href="https://www.fomal.cc/posts/11a473c.html"/>
    <id>https://www.fomal.cc/posts/11a473c.html</id>
    <published>2022-08-11T14:16:46.000Z</published>
    <updated>2022-08-11T14:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>两道入门题目：</strong></p><h3 id="1-2305-公平分发饼干">1.<a href="https://leetcode.cn/problems/fair-distribution-of-cookies/"><strong>2305. 公平分发饼干</strong></a></h3><p>1.状态定义:<strong>dp[i][j]</strong> 为第 <strong>i</strong>个孩子分饼干状态为 <strong>j</strong> 时每个孩子能分到的最多饼干数的最小值</p><p>2.状态转移:要求得<strong>dp[i][j]</strong> 的值，要考虑 <strong>j</strong> 的每个子集，再维护 子集计算出的最大值然后转移过来 <strong>最小值</strong></p><p>​      <strong>dp[i][j]=min(max(dp[i-1][j-x],sum[x]))</strong> 其中sum[x]为分配状态为 <strong>x</strong> 时的总的糖果数</p><p>3.初始化:<strong>dp[0][j]=sum[j]</strong>，只分给第一个孩子肯定是全分了总数就是饼干数<strong>sum[j]</strong>，其余为 <strong>INF</strong> 方便覆盖</p><p>4.遍历顺序:先i后j最后x,正序</p><p>5.返回形式:返回 <strong>dp[n-1][mask-1]</strong> 即 所有孩子将饼干全部分完时<strong>每个孩子最大饼干数的最小值</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distributeCookies</span><span class="params">(<span class="type">int</span>[] cookies, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cookies.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[k][mask];</span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[mask];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; mask; i++) &#123;</span><br><span class="line">            <span class="comment">// x为获取的最低位1后面尾随0个数，y为缺位x的差集</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.numberOfTrailingZeros(i), y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">            sum[i] = sum[y] + cookies[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        System.arraycopy(sum, <span class="number">0</span>, dp[<span class="number">0</span>], <span class="number">0</span>, mask);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            Arrays.fill(dp[i], <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mask; j++) &#123;</span><br><span class="line">                <span class="comment">// 此时j-x就是枚举j的所有子集</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> j; x != <span class="number">0</span>; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j], Math.max(dp[i - <span class="number">1</span>][j - x], sum[x]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[k - <span class="number">1</span>][mask - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1723-完成所有工作的最短时间">2.<a href="https://leetcode.cn/problems/find-minimum-time-to-finish-all-jobs/"><strong>1723. 完成所有工作的最短时间</strong></a></h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTimeRequired</span><span class="params">(<span class="type">int</span>[] jobs, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> jobs.length;    <span class="comment">// n为工作份数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; n;  <span class="comment">// 工作分配情况数目</span></span><br><span class="line">        <span class="comment">// dp[i][j]表示考虑索引为[0,i]的工人,工作分配情况为j(01010...表示)时每个工人最大工作时间的最小值</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[k][mask];</span><br><span class="line">        <span class="comment">// 初始化sum[i] -&gt; 完成状态为i的工作的总时间</span></span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[mask];</span><br><span class="line">        <span class="comment">// i∈[1,mask-1] 因为sum[0]=0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; mask; i++) &#123;</span><br><span class="line">            <span class="comment">// x为i最低位1后面的尾随0个数,y为与i相比仅仅缺位x位置的状态</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.numberOfTrailingZeros(i), y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">            sum[i] = sum[y] + jobs[x];  <span class="comment">// 加上缺位的x就是i的时长</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化dp</span></span><br><span class="line">        System.arraycopy(sum, <span class="number">0</span>, dp[<span class="number">0</span>], <span class="number">0</span>, mask);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            Arrays.fill(dp[i], <span class="number">0x3f3f3f3f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历dp状态</span></span><br><span class="line">        <span class="comment">// 遍历每个工人i</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历每种状态j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; mask; j++) &#123;</span><br><span class="line">                <span class="comment">// 遍历状态j的每种子集j-x</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> j; x != <span class="number">0</span> ; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">                    <span class="comment">// 找到每种子集j-x得到的最大值转移过来的 最小值 就是考虑[0,i]工人,状态为j-x的最大工作时间的最小值</span></span><br><span class="line">                    <span class="comment">// 子集转移途径为:取前面dp[i - 1][j - x]最大值的最小值与分配给工人i的sum[x]进行比较找到最大值</span></span><br><span class="line">                    <span class="comment">// 再维护每种转移途经最小值</span></span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j], Math.max(dp[i - <span class="number">1</span>][j - x], sum[x]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 所有工人分配完所有工作的最长单人工作时间最小值</span></span><br><span class="line">        <span class="keyword">return</span> dp[k - <span class="number">1</span>][mask - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不妨来总结一下状态压缩DP：其实状态压缩DP是类似于暴力法回溯的方法，能用状态压缩方法做的通常都可以用回溯+剪枝来求解。一般来说这种问题称为“分配问题”，或者叫做“桶轮询”。就是将元素(通常数目很小&lt;32个)分配到多个容器(桶)中，然后求解有每个桶最多数目的最少值，或者是满足条件路径数等，这里求解目标的不同体现在转移方程上。</p><p>抽象一下：饼干、工作（要分配的对象）——<strong>元素</strong>；工人、孩子（被分配到的地方）——<strong>容器（桶）</strong></p><p><a href="https://leetcode.cn/problems/beautiful-arrangement/">526. 优美的排列</a> 这道题就是要求路径数目，同时将桶容量限制为1，因此子集数目只有 i 个</p><h3 id="3-总体模板（本质也是DP）：">3.总体模板（本质也是DP）：</h3><p>1.状态定义：dp[i][i]为考虑前 <strong>i</strong> 个容器（桶），分配状态为 <strong>j</strong> (0101表示分配状态)时候的 所求量（路径数、最大值、最小值等）</p><p>2.状态转移：此时遍历到第 <strong>i</strong> 个容器（桶），一般来说要求 <strong>dp[i][j]</strong> 得考虑前面容器的情况 -&gt; <strong>dp[i-1][j-x]</strong></p><p>其中 <strong>x</strong> 为第 <strong>i</strong> 个容器的选择状态，那么 <strong>j-x</strong> 就是 <strong>[0,i-1]</strong> 个容器的选择状态</p><p>将第<strong>i</strong>个容器独立出来考虑，这个容器的选择有哪些？也就是转移路径有哪些？？？</p><p>很显然如果桶的容量（包括元素个数与总和）没有限制的话，<strong>j</strong> 的全体子集（除了本身）都是符合要求的前一个状态</p><p>-&gt; 因此可以直接通过下面语句枚举 <strong>j</strong> 的所有合法子集来进行 dp[i][j] 状态转移</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> j; x != <span class="number">0</span> ; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j - x]... <span class="comment">// 搭建两个状态的桥梁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-&gt; 当然也有可能<strong>容量有限</strong>：参考 <a href="https://leetcode.cn/problems/beautiful-arrangement/">526. 优美的排列</a> 枚举符合条件的子集（合法转移路径）进行转移即可</p><p>3.初始化：一般来说，初始化 <strong>dp[0][j]</strong> 为首个容器分得状态 <strong>j</strong> 时的所求量；其他<strong>dp[i][j]</strong> 按照转移逻辑来初始化</p><p>目的都是要作为初始哨兵不影响第一个值的覆盖（如求最大值就弄个很小的数第一个比较的必定顺利覆盖…）</p><p>4.遍历顺序：一般是先遍历容器 <strong>i</strong> ，再遍历每个状态 <strong>j</strong> ，最后遍历每种合法转移路径 <strong>j-x</strong>，默认正序</p><p>5.返回形式：一般返回 <strong>dp[n-1][mask-1]</strong> 表示考虑所有桶，把所有元素分配完的所求量为多少</p>]]></content>
    
    
    <summary type="html">状态压缩DP是类似于暴力法回溯的方法，能用状态压缩方法做的通常都可以用回溯+剪枝来求解，这篇文章总结状态压缩DP的一些解题方法</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://www.fomal.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="状态压缩DP" scheme="https://www.fomal.cc/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
    
  </entry>
  
  <entry>
    <title>有向图的表示方法</title>
    <link href="https://www.fomal.cc/posts/b0713fa8.html"/>
    <id>https://www.fomal.cc/posts/b0713fa8.html</id>
    <published>2022-08-11T14:06:17.000Z</published>
    <updated>2022-08-11T14:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>约定 <strong>n</strong> 为点数， <strong>m</strong>为边数，times = [[2,1,1],[2,3,1],[3,4,1]] 表示3条边</p><p>2-&gt;1 权重为1</p><p>2-&gt;3 权重为1</p><p>3-&gt;4 权重为1</p><h3 id="1-邻接矩阵">1.邻接矩阵</h3><p>这是一种使用二维矩阵来进行存图的方式。</p><p>适于边数较多的「<strong>稠密图</strong>」使用，当边数量接近点的数量的平方，即m≈n²时，可定义为「<strong>稠密图</strong>」。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 邻接矩阵数组：w[a][b] = c 代表从 a 到 b 有权重为 c 的边</span></span><br><span class="line"><span class="type">int</span>[][] w = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加边操作</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    w[a][b] = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-邻接表-链式前向星存图">2.邻接表(链式前向星存图)</h3><p>适用于边数较少的「<strong>稀疏图</strong>」使用，当边数量接近点的数量，即m≈n 时，可定义为「<strong>稀疏图</strong>」。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] he = <span class="keyword">new</span> <span class="title class_">int</span>[N], e = <span class="keyword">new</span> <span class="title class_">int</span>[M], ne = <span class="keyword">new</span> <span class="title class_">int</span>[M], w = <span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    e[idx] = b;    <span class="comment">// 边idx指向节点b</span></span><br><span class="line">    ne[idx] = he[a];    <span class="comment">// 头插法在上一轮的a射出的边的头结点上插入idx</span></span><br><span class="line">    he[a] = idx;    <span class="comment">// 更新a射出的边的头结点为边idx</span></span><br><span class="line">    w[idx] = c;    <span class="comment">// 边idx的权重为c</span></span><br><span class="line">    idx++;        <span class="comment">// 边索引+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先 idx 是用来对<strong>边</strong>进行编号的：</p><p>1.he 数组：存储是某个节点所对应的<strong>边的集合</strong>（链表）的头结点；</p><p>如下图所示：he[u]=边4</p><p>注意：<strong>仅仅是存储头结点</strong>，之后就可以根据ne数组进行查找！</p><p><img src="../images/p20.jpg" alt="p20"></p><p>2.e  数组：<strong>某一条边指向的节点</strong>：e[边4]=v4</p><p><a href="http://3.ne">3.ne</a> 数组：由于是以链表的形式进行存边，该数组用于<strong>找到下一条边</strong></p><p>ne[边4]=边3；构建链表的过程是头插法：null&lt;-边1&lt;-边2…</p><p>4.w  数组：用于记录<strong>某条边的权重</strong>为多少。</p><p>编码的边是用idx作为索引来进行标记的，也就是说每一个idx对应一条边</p><p>因此当我们想要<strong>遍历所有由 a 点发出的边（注意是a伸出的边）</strong> 时，可使用如下方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从a射出的边的头结点出发一路遍历至-1(null)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[a]; i != -<span class="number">1</span>; i = ne[i]) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> e[i], c = w[i]; <span class="comment">// 存在由 a 指向 b 的边，权重为 c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-类">3.类</h3><p>这是一种最简单，但是相比上述两种存图方式，使用得较少的存图方式。</p><p>只有当我们需要确保某个操作复杂度严格为<strong>O(m)</strong> 时，才会考虑使用。</p><p>具体的，我们建立一个类来记录有向边信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="comment">// 代表从 a 到 b 有一条权重为 c 的边</span></span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    Edge(<span class="type">int</span> _a, <span class="type">int</span> _b, <span class="type">int</span> _c) &#123;</span><br><span class="line">        a = _a; b = _b; c = _c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常我们会使用 List 存起所有的边对象，并在需要遍历所有边的时候，进行遍历：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Edge&gt; es = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (Edge e : es) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-HashMap">4.HashMap</h3><p>注意：如果节点索引集中可以用List数组代替HashMap，具体参考List数组创建与初始化方法</p><p>key为出发点，value为该出发点对应的终点列表（一个出发点可能对应多个终点）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">    List&lt;Integer&gt; list1 = map.getOrDefault(edge[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list1.add(edge[<span class="number">1</span>]);</span><br><span class="line">    map.put(edge[<span class="number">0</span>], list1);</span><br><span class="line">    <span class="comment">// 若为无向图</span></span><br><span class="line">    List&lt;Integer&gt; list2 = map.getOrDefault(edge[<span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list2.add(edge[<span class="number">0</span>]);</span><br><span class="line">    map.put(edge[<span class="number">1</span>], list2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带权图</span></span><br><span class="line">HashMap&lt;Integer, List&lt;<span class="type">int</span>[]]&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; list1 = map.getOrDefault(edge[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list1.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;edge[<span class="number">1</span>], edge[<span class="number">2</span>]&#125;);</span><br><span class="line">    map.put(edge[<span class="number">0</span>], list1);</span><br><span class="line">    <span class="comment">// 若为带权无向图</span></span><br><span class="line">    List&lt;Integer&gt; list2 = map.getOrDefault(edge[<span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    list2.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;edge[<span class="number">0</span>], edge[<span class="number">2</span>]&#125;);</span><br><span class="line">    map.put(edge[<span class="number">1</span>], list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">有向图的表示方法有很多：邻接矩阵、链式前向星存图、List数组、HashMap、类等</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://www.fomal.cc/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>排序算法专题</title>
    <link href="https://www.fomal.cc/posts/7236f06c.html"/>
    <id>https://www.fomal.cc/posts/7236f06c.html</id>
    <published>2022-08-11T13:59:08.000Z</published>
    <updated>2022-08-11T13:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-快速排序">1.快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">19</span>&#125;;</span><br><span class="line">    quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    快速排序:原理每一轮选一个基准元素pivot</span></span><br><span class="line"><span class="comment">    利用两个指针分别将&lt;=pivot和&gt;pivot的元素分别放在pivot的左边与右边</span></span><br><span class="line"><span class="comment">    最后递归调用原函数直至区间长度缩小为1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>; <span class="comment">//  区间长度&lt;=1直接结束</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> low, r = high;  <span class="comment">// 左右指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> nums[low];  <span class="comment">// 以nums[low]为基准</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="comment">// r指针先行可以确保最后停留的位置必定是&lt;=基准，再不济就移动到pivot位置上；而l指针先行会找到首个大于基准的位置</span></span><br><span class="line">        <span class="comment">// 例如在[1,2,3,4,5]这种情况会停在2处，此时r指针想找小于等于基准的元素但是也只能移动到2处结束</span></span><br><span class="line">        <span class="comment">// 循环退出-&gt;将1与2的位置交换，此时有[2,1,3,4,5] 这个就违反了快排的宗旨了，再递归左右子区间就出错。</span></span><br><span class="line">        <span class="comment">// 归根到底右指针先行，是为了避免左指针主动时导致停留在比基准大的地方，与基准交换后直接导致基准左边有元素大于基准。</span></span><br><span class="line">        <span class="comment">// 右指针先行会主动占据&lt;=基准的元素，再不济就是移动到基准位置，这两种情况符合快排目的.</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt; pivot) r--;  <span class="comment">// r停留在首个&lt;=基准的元素处</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt;= pivot) l++;  <span class="comment">// l停留在首个&gt;基准的元素处</span></span><br><span class="line">        <span class="keyword">if</span> (l &lt; r) &#123;    <span class="comment">// 交换nums[l]与nums[r]</span></span><br><span class="line">            <span class="comment">// nums[l] ^= nums[r];</span></span><br><span class="line">            <span class="comment">// nums[r] ^= nums[l];</span></span><br><span class="line">            <span class="comment">// nums[l] ^= nums[r];</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[l];</span><br><span class="line">            nums[l] = nums[r];</span><br><span class="line">            nums[r] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// l == r 将nums[low]与nums[l]交换</span></span><br><span class="line">    nums[low] = nums[l];</span><br><span class="line">    nums[l] = pivot;</span><br><span class="line">    <span class="comment">// 递归排序左右子区间</span></span><br><span class="line">    quickSort(nums, low, r - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, r + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-归并排序">2.归并排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge_Sort</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">19</span>&#125;;</span><br><span class="line">        mergeSort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    归并排序:分区间排序+合并两个有序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        mergeSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    重载的带区间端点的归并排序方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span>[] tmp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(nums, l, mid, tmp);   <span class="comment">// 递归排序[l,mid]</span></span><br><span class="line">        mergeSort(nums, mid + <span class="number">1</span>, r, tmp);   <span class="comment">// 递归排序[mid+1,r]</span></span><br><span class="line">        <span class="comment">// 合并两个有序数组[l,mid]和[mid+1,r]</span></span><br><span class="line">        merge(nums, l, mid, r, tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    合并nums两个区间内的两个有序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r, <span class="type">int</span>[] tmp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> l;    <span class="comment">// 合并后的指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = mid + <span class="number">1</span>; <span class="comment">// 左右指针</span></span><br><span class="line">        <span class="comment">// 将[l,mid]和[mid+1,r]元素按照大小拷贝到tmp对应位置中</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;    <span class="comment">// 等于的时候还没赋值!</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[j]) &#123;</span><br><span class="line">                tmp[idx++] = nums[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[idx++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 走完还没有走完的一边</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) tmp[idx++] = nums[i++];</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r) tmp[idx++] = nums[j++];</span><br><span class="line">        <span class="comment">// 将临时数组拷贝至nums对应位置</span></span><br><span class="line">        System.arraycopy(tmp, l, nums, l, r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-堆排序">3.堆排序</h3><p>堆是具有以下性质的完全二叉树：每个结点的值都<strong>大于</strong>或等于其左右孩子结点的值，称为大顶堆；</p><p>或者每个结点的值都<strong>小于</strong>或等于其左右孩子结点的值，称为小顶堆。如下图：</p><p><img src="../images/p19.jpg" alt="p19"></p><p><strong>参考资料：</strong><a href="https://blog.csdn.net/Javascript_tsj/article/details/124051388"><strong>堆排序（超详细图解 java版）</strong></a></p><p><strong>主要步骤：</strong></p><p>1.将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆（升序一般用大顶堆）</p><p>2.将堆顶元素与末尾元素交换，将最大元素&quot;沉&quot;到数组末端</p><p>3.重新调整结构,使其满足堆定义，然后继续交换堆顶元素与当前末尾元素</p><p>4.反复执行调整+交换步骤，直到整个序列有序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        HeapSort(nums);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     堆排序主方法:</span></span><br><span class="line"><span class="comment">     一般来说升序排列就构造大顶堆(堆顶最大&amp;&amp;当前节点比左右子节点都大-&gt;但是左右节点的大小没有要求)</span></span><br><span class="line"><span class="comment">     堆的索引统一从0开始,因此总的范围在[0,len-1]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 叶子节点肯定堆的最底层,不用下沉</span></span><br><span class="line">        <span class="comment">// 这里用了一个结论:只下沉非叶子节点间接也上浮了所有叶子节 因此只下沉前半部分即可保证堆有序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;    <span class="comment">// len÷2-1是首个非叶子结点索引</span></span><br><span class="line">            sink(nums, i, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下沉完后整个堆有序 堆顶元素就是最大元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注:索引为[0, i]之间为要调整的堆结范围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 将堆中最后一个元素与堆顶元素交换,让最大值放到最后</span></span><br><span class="line">            swap(nums, <span class="number">0</span>, i);</span><br><span class="line">            <span class="comment">// 此时堆顶是下面换上去的元素很小,堆结构被破坏了,通过sink()方法让该元素下沉至适合位置</span></span><br><span class="line">            <span class="comment">// 注意此时要把最后一个排除在外,因为nums的最大值已经确定-&gt;此时堆范围变为[0,i-1]</span></span><br><span class="line">            sink(nums, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 下沉完之后[0,i-1]又是一个有序的堆</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整堆方法(在大顶堆中表现为下沉)</span></span><br><span class="line"><span class="comment">     * 将指定索引target的元素在[0, end]范围内进行下沉操作至正确位置</span></span><br><span class="line"><span class="comment">     * 比较当前节点值与左右子节点最大值,若前节点值小于左右子节点最大值必须下沉(交换)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums   待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 下沉目标元素索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end    要调整的堆范围最大索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> target;   <span class="comment">// 下沉指针</span></span><br><span class="line">        <span class="comment">// 若存在左子节点就进入循环(否则表明下沉到底层了)</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * idx + <span class="number">1</span> &lt;= end) &#123;</span><br><span class="line">            <span class="comment">// maxLR为左右子节点最大值对应的索引,初始化为左子节点索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLR</span> <span class="operator">=</span> <span class="number">2</span> * idx + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 如果有右子节点 &amp;&amp; 右子节点的值比左子节点大</span></span><br><span class="line">            <span class="keyword">if</span> (maxLR + <span class="number">1</span> &lt;= end &amp;&amp; nums[maxLR + <span class="number">1</span>] &gt; nums[maxLR]) &#123;</span><br><span class="line">                <span class="comment">// 更新maxLR的值为右子节点索引</span></span><br><span class="line">                maxLR++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断 当前节点值 与 左右子节点最大值maxLR 的大小</span></span><br><span class="line">            <span class="comment">// 正确的堆结构应为:当前节点值nums[idx]&gt;=nums[maxLR] 若这里nums[idx]&lt;nums[maxLR]那就要交换了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[idx] &lt; nums[maxLR]) &#123;</span><br><span class="line">                <span class="comment">// 将idx位置与maxLR位置元素进行交换</span></span><br><span class="line">                swap(nums, idx, maxLR);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// nums[idx]&gt;=nums[maxLR]表明target元素位置已经正确-&gt;退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// idx指针往maxLR方向走</span></span><br><span class="line">            idx = maxLR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    交换nums[i]与nums[j]的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">排序算法是最常用最基础的的算法之一，本篇文章总结常用的3种时间复杂度为O(NlogN)的比较排序算法：快排、堆排序、归并排序，并整合出模板供参考！</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://www.fomal.cc/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="快排" scheme="https://www.fomal.cc/tags/%E5%BF%AB%E6%8E%92/"/>
    
    <category term="堆排序" scheme="https://www.fomal.cc/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
    <category term="归并排序" scheme="https://www.fomal.cc/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>区间求和专题</title>
    <link href="https://www.fomal.cc/posts/6e401bce.html"/>
    <id>https://www.fomal.cc/posts/6e401bce.html</id>
    <published>2022-08-11T13:41:18.000Z</published>
    <updated>2022-08-11T13:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-树状数组-「单点修改-区间查询」：">1.树状数组-&gt;「单点修改 &amp; 区间查询」：</h3><p>先输入一个长度为n的数组nums，有如下两种操作：</p><p>1.输入一个数m，输出数组中下标1~m的前缀和sum[1,m]</p><p>2.对某个指定下标的数进行值的修改</p><p><img src="../images/p10.jpg" alt="p10"></p><p>常规方法：<strong>前缀和</strong>，但是当单点修改的次数增多，前缀和更新耗时O(N)，然后再求sum[1,m]，总体时间复杂度为O(N^2)</p><p>进阶方法：<strong>树状数组和线段树</strong>可以达到单次操作logN级别。平均时间复杂度O(NlogN)</p><p><img src="../images/p11.jpg" alt="p11"></p><p>7=0111=0100+0010+0001=lowBit(7)+lowBit(3)+lowBit(1)</p><p><strong>前置知识</strong>：二进制区间分解lowBit(x)=x^(-x)求出x中仅保留最低位的1的数值，lowBit(7)=0100=4</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>概念：树状数组就是一种基于二进制思想的数据结构，基本用途是维护序列的前缀和</strong>。</p><p><strong>对于给定的序列a，设树状数组为c，则c[x]保存序列a的区间[x-lowbit(x)+1,x]中所有数的和</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] tr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br></pre></td></tr></table></figure><p>主要有以下两个基本操作:</p><p>(1) update，单点修改，修改序列a中的某个元素;</p><p>(2) query，区间查询，查询序列a中区间[1,x]的所有数的和。</p><p><img src="../images/p12.jpg" alt="p12"></p><p><strong>操作1:区间查询query</strong></p><p>树状数组能够完成的是查询前缀和，相减即可得到区间和。</p><p>利用c[x]维护的是序列a中[x-lowbit(x)+1,x]的区间和，然后不断向前寻找即可，时间复杂度为O(logN)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &gt; <span class="number">0</span>; i -= lowbit(i)) ans += tr[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作2:单点修改update</strong></p><p>单点修改更准确的说是“单点增加”，给序列a中的一个数a[x]加上t，然后要更新树状数组c维护的前缀和，只需要不断向上维护c[x]的父亲结点即可，时间复杂度为O(logN)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> u)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt;= n; i += lowbit(i)) tr[i] += u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：这里都默认索引从1开始</strong></p><p><strong>思考:如何初始化树状数组?</strong></p><p>方法一:输入序列a等价于对a进行单点修改，更新树状数组即可，时间复杂度为O(NlogN)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    add(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二:考虑每个结点对父亲结点的贡献，时间复杂度为O(N)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    tr[i] += nums[i];</span><br><span class="line">    <span class="keyword">if</span> (i + lowBit(i) &lt;= n) tr[i + lowBit(i)] += tr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三叶姐树状数组模板：</p><p>一篇不错的图解：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/-by-hu-ge-8-t4rn/">[树状数组] 详解树状数组, 包含更新查询图解, 秒懂lowbit含义(JAVA 65ms, 68.6MB)</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上来先把三个方法写出来</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>[] tree;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询前缀和的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &gt; <span class="number">0</span>; i -= lowbit(i)) ans += tree[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在树状数组 x 位置中增加值 u</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> u)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt;= n; i += lowbit(i)) tree[i] += u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化「树状数组」，要默认数组是从 1 开始</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) add(i + <span class="number">1</span>, nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用「树状数组」：</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 原有的值是 nums[i]，要使得修改为 val，需要增加 val - nums[i]</span></span><br><span class="line">        add(i + <span class="number">1</span>, val - nums[i]); </span><br><span class="line">        nums[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> query(r + <span class="number">1</span>) - query(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-线段树「单点修改、区间修改、单点查询、区间查询-但性能不高」">2.线段树「单点修改、区间修改、单点查询、区间查询-&gt;但性能不高」</h3><p><strong>参考资料：</strong><a href="https://mp.weixin.qq.com/s/T3Ds8Eb8mZ5f96NjRFr6WA"><strong>https://mp.weixin.qq.com/s/T3Ds8Eb8mZ5f96NjRFr6WA</strong></a></p><p><strong>以下笔记均参考力扣题解(推荐)：</strong><a href="https://leetcode.cn/problems/range-module/solution/by-jiang-hui-4-tu5a/">Range模块【线段树动态开点+线段树图解】</a></p><p><strong>什么是线段树？</strong></p><p>线段树其实是一种二叉搜索树，将一个大的区间划分为一个个单元区间。</p><p>内个单元区间表示成一个节点(<strong>单元区间-&gt;节点</strong>) 线段树中的线段，其实也是区间的意思，就是区间树</p><p>假设我们有一个数组为[1,2,3,4,5,6,7,8]，我们表示为一个区间和线段树就是下图：</p><p><img src="../images/p13.jpg" alt="p13"></p><p>可见线段树的区间是按照区间的中点进行分叉，左子节点的区间必定小于右子节点的区间，同理左右子树均是BST</p><p><strong>构建线段树代码（val基于区间求和）：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 线段树模板(今天一定一定要写出来!!!!!)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="comment">// 用节点数组表示的线段树</span></span><br><span class="line">    Node[] tree;</span><br><span class="line">    <span class="comment">// 原始数据</span></span><br><span class="line">    <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化线段树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;   <span class="comment">// 载入数据</span></span><br><span class="line">        <span class="built_in">this</span>.tree = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">4</span> * data.length];  <span class="comment">// 节点个数统一开4*N个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        线段树节点类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> left;   <span class="comment">// (该节点对应的)区间左端点</span></span><br><span class="line">        <span class="type">int</span> right;  <span class="comment">// 区间右端点</span></span><br><span class="line">        <span class="type">int</span> lazy;   <span class="comment">// 懒标记</span></span><br><span class="line">        <span class="type">int</span> val;    <span class="comment">// 节点值(根据不同的问题意义不同)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据区间左右边界[l,r]来构建线段树:idx表示线段树的节点索引,l与r分别表示区间左右边界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        tree[idx] = <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 创建idx位置的节点</span></span><br><span class="line">        tree[idx].left = l; <span class="comment">// 该节点左边界为l</span></span><br><span class="line">        tree[idx].right = r;    <span class="comment">//该节点右边界为r</span></span><br><span class="line">        <span class="comment">// base case:到达叶子结点直接赋值</span></span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tree[idx].val = data[r - <span class="number">1</span>];    <span class="comment">// 因为idx从1开始,区间的l与r也是从1开始,但是data索引从0开始,因此向左偏移1位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;  <span class="comment">// [l,r]区间中点</span></span><br><span class="line">        <span class="comment">// 递归构建左右子树:当idx索引从1开始时,idx*2为左子节点,idx*2+1为右子节点</span></span><br><span class="line">        build(idx * <span class="number">2</span>, l, mid); <span class="comment">// 左子节点区间范围[l,mid] 左子节点个数&gt;=右子节点</span></span><br><span class="line">        build(idx * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r); <span class="comment">// 右子节点区间范围[mid+1,r]</span></span><br><span class="line">        tree[idx].val = tree[idx * <span class="number">2</span>].val + tree[idx * <span class="number">2</span> + <span class="number">1</span>].val;  <span class="comment">// 更新idx节点的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒标记的引入：</strong></p><p><img src="../images/p14.jpg" alt="p14"></p><p>如果是线段树，我们直接对根节点的值进行+(8-1+1)*1的操作就可以得到新的区间和，但是这样当我们查询中间某段区间的和时就会发现不对，因为这个+(8-1+1)*1没有涉及根节点的区间和操作！</p><p>于是就想可不可以在root处引入一个标记的量，在我们要下探到要求root子区间的区间和时可以把这个+1操作带下去？把子区间进行更新？于是就引入了<strong>lazy字段</strong></p><p><strong>注意：</strong> 我们只有在用到没有更新的区间时（也就是当前区间含有lazy），才会下传lazy，达到懒更新的目的。</p><p><img src="../images/p15.jpg" alt="p15"></p><p><img src="../images/p16.jpg" alt="p16"></p><p>也许我们还会更新[5,8]区间的值，我们除了设置lazy字段外，<strong>还需要将结果上传到他的父节点</strong>！（很显然，下面变了，上面区间包含下面也要变）</p><p><img src="../images/p17.jpg" alt="p17"></p><p><img src="../images/p18.jpg" alt="p18"></p><p><strong>更新与查询代码如下（非动态开点）：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">更新某个区间的值:idx为节点索引,[l,r]为要更新的区间,val代表要更新进去的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">// idx节点区间在要修改的[l,r]区间里面-&gt;直接更新到这里并并进行懒标记即可</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx].left &gt;= l &amp;&amp; tree[idx].right &lt;= r) &#123;</span><br><span class="line">        <span class="comment">// idx节点值 += val * idx节点区间的的节点数</span></span><br><span class="line">        <span class="comment">// 意思就是更新了idx节点的整个区间,节点值就加上相应的数</span></span><br><span class="line">        tree[idx].val += (tree[idx].right - tree[idx].left + <span class="number">1</span>) * val;</span><br><span class="line">        <span class="comment">// 对idx节点进行懒标记</span></span><br><span class="line">        tree[idx].lazy = val;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[idx].lazy != <span class="number">0</span>) pushDown(idx); <span class="comment">// 当前节点有懒标记-&gt;下沉懒标记</span></span><br><span class="line">    <span class="comment">// [l,r]与idx节点左区间有交集</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tree[idx * <span class="number">2</span>].right) update(idx * <span class="number">2</span>, l, r, val);</span><br><span class="line">    <span class="comment">// [l,r]与idx节点右区间有交集</span></span><br><span class="line">    <span class="keyword">if</span> (r &gt;= tree[idx * <span class="number">2</span> + <span class="number">1</span>].left) update(idx * <span class="number">2</span> + <span class="number">1</span>, l, r, val);</span><br><span class="line">    <span class="comment">// 底下递归完成后向上回溯更新idx的值</span></span><br><span class="line">    pushUp(idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查询区间[l,r]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// idx节点的区间被[l,r]完全包含 -&gt; 直接返回节点值</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx].left &gt;= l &amp;&amp; tree[idx].right &lt;= r) <span class="keyword">return</span> tree[idx].val;</span><br><span class="line">    <span class="comment">// 否则就还要继续往下走更小的区间</span></span><br><span class="line">    <span class="comment">// 遇到有懒标记也要下沉(因为你现在要查询小区间的信息)</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx].lazy != <span class="number">0</span>) pushDown(idx);</span><br><span class="line">    <span class="comment">// 跟左右区间有交集</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx * <span class="number">2</span>].right &gt;= l) res += query(idx * <span class="number">2</span>, l, r);  <span class="comment">// 累加递归完成的值</span></span><br><span class="line">    <span class="keyword">if</span> (tree[idx * <span class="number">2</span> + <span class="number">1</span>].left &lt;= r) res += query(idx * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res; <span class="comment">// 返回结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上传结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    tree[idx].val = tree[idx * <span class="number">2</span>].val + tree[idx * <span class="number">2</span> + <span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下沉懒标记</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="comment">// 向左右子节点下沉lazy(累加而不是覆盖)</span></span><br><span class="line">    tree[idx * <span class="number">2</span>].lazy += tree[idx].lazy;</span><br><span class="line">    tree[idx * <span class="number">2</span> + <span class="number">1</span>].lazy += tree[idx].lazy;</span><br><span class="line">    <span class="comment">// idx节点区间的中点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> tree[idx].left + (tree[idx].right - tree[idx].left) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 左右子节点的节点值分别加上(懒标记的值*区间节点个数)</span></span><br><span class="line">    tree[idx * <span class="number">2</span>].val += tree[idx].lazy * (mid - tree[idx].left + <span class="number">1</span>);</span><br><span class="line">    tree[idx * <span class="number">2</span> + <span class="number">1</span>].val += tree[idx].lazy * (tree[idx].right - mid);</span><br><span class="line">    <span class="comment">// 下沉了lazy后idx的懒标记置0</span></span><br><span class="line">    tree[idx].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态开点的引入：</strong></p><p>上述代码只是针对不对区间长度进行修改，只能在固定的区间内查询和修改，并且用到了4n的空间，有些空间根本没有被使用，有的题目数据规模到了1e9，如果我们开4n的空间并不可行！</p><p>于是我们需要动态地进行节点创建，即我们不用idx * 2和idx* 2 + 1来表示节点的左右子节点，而是在Node里添加leftChild和rightChild两个引用，来找到左右节点。由于我们是在更新与查询中进行动态开点，所以不需要build树！</p><p><strong>动态开点的代码如下：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 线段树(动态开点+懒标记)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree_Dynamic</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态开点线段树节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> left, right;    <span class="comment">// 区间左右端点</span></span><br><span class="line">        <span class="type">int</span> val;    <span class="comment">// 节点的值</span></span><br><span class="line">        <span class="type">int</span> lazy;   <span class="comment">// 懒标记:0代表没有懒标记</span></span><br><span class="line">        Node leftChild, rightChild; <span class="comment">// 左右子树引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据区间[left,right]创建节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态开点的区间更新:root代表根节点,[l,r]代表更新区间,val代表更新的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node root, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.[l,r]不在root区间的范围内 -&gt; 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt; root.left || l &gt; root.right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 2.[l,r]包含root区间 -&gt; 进行懒标记并更新root的值</span></span><br><span class="line">        <span class="keyword">if</span> (root.left &gt;= l &amp;&amp; root.right &lt;= r) &#123;</span><br><span class="line">            root.lazy = val;    <span class="comment">// 进行懒标记</span></span><br><span class="line">            root.val += (root.right - root.left + <span class="number">1</span>) * val; <span class="comment">// 节点值+=区间长度*val</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.继续往下走</span></span><br><span class="line">        lazyCreate(root);   <span class="comment">// 动态开点</span></span><br><span class="line">        pushDown(root); <span class="comment">// 下传lazy</span></span><br><span class="line">        update(root.leftChild, l, r, val);  <span class="comment">// 更新左子树区间</span></span><br><span class="line">        update(root.rightChild, l, r, val); <span class="comment">// 更新右子树区间</span></span><br><span class="line">        pushUp(root);   <span class="comment">// 上传结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态开点的查询区间[l,r]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(Node root, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="comment">// [l,r]必定在root里面,因为root是最大的可能区间</span></span><br><span class="line">        <span class="comment">// 1.root的区间在[l,r]里面 -&gt; 直接返回节点值</span></span><br><span class="line">        <span class="keyword">if</span> (root.left &gt;= l &amp;&amp; root.right &lt;= r) <span class="keyword">return</span> root.val;</span><br><span class="line">        <span class="comment">// 2.否则要往下走找到[l,r]完全包含子节点整个区间的情况</span></span><br><span class="line">        lazyCreate(root);   <span class="comment">// 动态开点</span></span><br><span class="line">        pushDown(root); <span class="comment">// 下传懒标记</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root.left + (root.right - root.left) / <span class="number">2</span>; <span class="comment">// root区间中点</span></span><br><span class="line">        <span class="comment">// 左子树范围[ll, mid] 右子树范围[mid+1,rr]</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid) &#123; <span class="comment">// [l,r]只占据到root左子树</span></span><br><span class="line">            <span class="keyword">return</span> query(root.leftChild, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) &#123;   <span class="comment">// [l,r]只占据到root右子树</span></span><br><span class="line">            <span class="keyword">return</span> query(root.rightChild, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// [l,r]占据root左子树与右子树</span></span><br><span class="line">            <span class="keyword">return</span> query(root.leftChild, l, mid) + query(root.rightChild, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不用上传结果了因为查询不改变节点的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    上传结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        root.val = root.leftChild.val + root.rightChild.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    下传懒标记:有懒标记-&gt;下传懒标记并更新子节点的值;没有-&gt;结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="comment">// 当且仅当有懒标记才进行下传</span></span><br><span class="line">        <span class="keyword">if</span> (root.lazy != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 懒标记的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> root.lazy;</span><br><span class="line">            <span class="comment">// 懒标记下沉至左右子节点</span></span><br><span class="line">            <span class="comment">// 这里懒标记累加还是覆盖可以根据具体问题进行分析</span></span><br><span class="line">            <span class="comment">// 比如说是求区间的累加值就是+= 如果是只有两个状态那种可以直接进行覆盖(LC715.Range模块)</span></span><br><span class="line">            root.leftChild.lazy += v;</span><br><span class="line">            root.rightChild.lazy += v;</span><br><span class="line">            <span class="comment">// 更新左右子节点的值</span></span><br><span class="line">            root.leftChild.val += (root.leftChild.right - root.leftChild.left + <span class="number">1</span>) * v;</span><br><span class="line">            root.rightChild.val += (root.rightChild.right - root.rightChild.left + <span class="number">1</span>) * v;</span><br><span class="line">            <span class="comment">// root取消懒标记</span></span><br><span class="line">            root.lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建左右子树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyCreate</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root.left + (root.right - root.left) / <span class="number">2</span>; <span class="comment">// root区间中点</span></span><br><span class="line">        <span class="comment">// 创建左右子树并构建连接</span></span><br><span class="line">        <span class="keyword">if</span> (root.leftChild == <span class="literal">null</span>) root.leftChild = <span class="keyword">new</span> <span class="title class_">Node</span>(root.left, mid);</span><br><span class="line">        <span class="keyword">if</span> (root.rightChild == <span class="literal">null</span>) root.leftChild = <span class="keyword">new</span> <span class="title class_">Node</span>(mid + <span class="number">1</span>, root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>数组表示的线段树(含懒标记+动态开点)可以参考三叶：</strong></p><p><a href="https://leetcode.cn/problems/my-calendar-i/"><strong>729. 我的日程安排表 I</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode.SegmentTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 729. 我的日程安排表 I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Q729</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MyCalendar</span> <span class="variable">myCalendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalendar</span>();</span><br><span class="line">        System.out.println(myCalendar.book(<span class="number">10</span>, <span class="number">20</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(myCalendar.book(<span class="number">15</span>, <span class="number">25</span>));    <span class="comment">// false</span></span><br><span class="line">        System.out.println(myCalendar.book(<span class="number">20</span>, <span class="number">30</span>));    <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCalendar</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        本题是线段树的模板题之一,由于值域范围在[0,1e9]因此只能采用动态开点的方式,否则会出现MLE</span></span><br><span class="line"><span class="comment">        本题要动态地获当前区间是否完全被覆盖,可以将线段树节点值设为当前区间的节点数(叶子结点只有0与1的区间和)</span></span><br><span class="line"><span class="comment">        同时为了使查询的时间复杂度为严格的O(logN)要加入懒标记</span></span><br><span class="line"><span class="comment">        -&gt;查询[start,end)区间是否能book就相当于求[start,end-1]的区间和是否为0</span></span><br><span class="line"><span class="comment">        懒标记的线段树空间复杂度为O(MlogN),M为操作次数; 查询和更新一次时间复杂度为:O(logN)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         节点类:</span></span><br><span class="line"><span class="comment">         本节点与之前的模板不同,该节点成员没有显式地包含节点u的区间左右端点[lc,rc]</span></span><br><span class="line"><span class="comment">         区间左右端点[lc,rc]可以通过update()与query()显式地传入再进行递归计算</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">            <span class="comment">// ls 与rs 分别代表当节点的左右子节点在tr中的下标 (相当于leftChild与rightChild)</span></span><br><span class="line">            <span class="comment">// val 表示当前节点的区间和(只有0与1)</span></span><br><span class="line">            <span class="comment">// add为懒标记</span></span><br><span class="line">            <span class="type">int</span> ls, rs, add, val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>, M = <span class="number">120010</span>, cnt = <span class="number">1</span>; <span class="comment">// N 区间范围; M 节点个数; cnt 节点索引</span></span><br><span class="line">        Node[] tr = <span class="keyword">new</span> <span class="title class_">Node</span>[M];    <span class="comment">// 数组表示的线段树</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyCalendar</span><span class="params">()</span> &#123;</span><br><span class="line">            tr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 根节点u从tr[0]开始</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        更新[l,r]区间的节点,更新值为val=1</span></span><br><span class="line"><span class="comment">        u 根节点索引;lc 与 rc 代表根节点u表示的值域范围</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="comment">// 节点u表示的范围[lc,rc]在[l,r]内部 -&gt; 直接更新节点值和懒标记</span></span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) &#123;</span><br><span class="line">                tr[u].val = (rc - lc + <span class="number">1</span>) * val;</span><br><span class="line">                tr[u].add = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lazyCreate(u);  <span class="comment">// 动态开点</span></span><br><span class="line">            pushDown(u, rc - lc + <span class="number">1</span>);   <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="comment">// 递归更新左右子节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) update(tr[u].ls, lc, mid, l, r, val); <span class="comment">// [l,r]占据到左子树</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) update(tr[u].rs, mid + <span class="number">1</span>, rc, l, r, val);  <span class="comment">// [l,r]占据到右子树</span></span><br><span class="line">            pushUp(u);  <span class="comment">// 回溯更新u的值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        查询[l,r]区间的节点</span></span><br><span class="line"><span class="comment">        u 根节点索引;lc 与 rc 代表根节点u表示的值域范围</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) <span class="keyword">return</span> tr[u].val;   <span class="comment">// u节点区间在[l,r]内</span></span><br><span class="line">            <span class="comment">// 否则继续往下走</span></span><br><span class="line">            lazyCreate(u);  <span class="comment">// 动态开点</span></span><br><span class="line">            pushDown(u, rc - lc + <span class="number">1</span>); <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) res = query(tr[u].ls, lc, mid, l, r); <span class="comment">// [l,r]占据到左子树</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) res += query(tr[u].rs, mid + <span class="number">1</span>, rc, l, r);  <span class="comment">// [l,r]占据到右子树</span></span><br><span class="line">            <span class="keyword">return</span> res; <span class="comment">// 返回左右区间总和</span></span><br><span class="line">            <span class="comment">// 查询不更新端点的值因此不用回溯</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        向上更新u的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            tr[u].val = tr[tr[u].ls].val + tr[tr[u].rs].val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        下传懒标记</span></span><br><span class="line"><span class="comment">        其中 len 为节点表示的区间长度 用于简化计算区间长度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> tr[u].add;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="number">0</span>) &#123;   <span class="comment">// 逐一懒标记不为0才下传</span></span><br><span class="line">                <span class="comment">// 1.下传懒标记</span></span><br><span class="line">                tr[tr[u].ls].add = v;</span><br><span class="line">                tr[tr[u].rs].add = v;</span><br><span class="line">                <span class="comment">// 2.更新子节点的值(不判断懒标记就要+=避免0覆盖)</span></span><br><span class="line">                tr[tr[u].ls].val = (len - len / <span class="number">2</span>) * v; <span class="comment">// 左(大)</span></span><br><span class="line">                tr[tr[u].rs].val = (len / <span class="number">2</span>) * v;   <span class="comment">// 右(小)</span></span><br><span class="line">                <span class="comment">// 3.懒标记下传完置0</span></span><br><span class="line">                tr[u].add = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        动态开点:动按需态创建左右子节点并构建连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyCreate</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].ls == <span class="number">0</span>) &#123;    <span class="comment">// 当且仅当左子节点没有时才进行开点(tr[u].ls为0表示还没开左子节点)</span></span><br><span class="line">                tr[u].ls = cnt++;   <span class="comment">// 构建与tr[u]的连接,索引依次取</span></span><br><span class="line">                tr[tr[u].ls] = <span class="keyword">new</span> <span class="title class_">Node</span>();  <span class="comment">// 开点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].rs == <span class="number">0</span>) &#123;</span><br><span class="line">                tr[u].rs = cnt++;</span><br><span class="line">                tr[tr[u].rs] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">book</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="comment">// 区间[start,end-1]已经有东西填充过了-&gt;不能book</span></span><br><span class="line">            <span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则更新并返回true</span></span><br><span class="line">            update(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/my-calendar-ii/solution/by-ac_oier-okkc/"><strong>731. 我的日程安排表 II</strong></a><strong>(注意节点维护的是最大值)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode.SegmentTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fomalhaut</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 731. 我的日程安排表 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Q731</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MyCalendarTwo</span> <span class="variable">MyCalendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalendarTwo</span>();</span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">10</span>, <span class="number">20</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">50</span>, <span class="number">60</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">10</span>, <span class="number">40</span>));    <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">5</span>, <span class="number">15</span>));     <span class="comment">// false</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">5</span>, <span class="number">10</span>));     <span class="comment">// true</span></span><br><span class="line">        System.out.println(MyCalendar.book(<span class="number">25</span>, <span class="number">55</span>));    <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCalendarTwo</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这题也可以用线段树进行求解:start与end的范围为[0,1e9]</span></span><br><span class="line"><span class="comment">        不过相比于Q729 我的日程安排表I 这里要维护的val为区间的最大值max</span></span><br><span class="line"><span class="comment">        当区间的最大值&gt;=2就说明已经有两个重叠的预订,第3个预订就不能book了</span></span><br><span class="line"><span class="comment">        查询和更新一次时间复杂度为:O(logN) 空间复杂度为O(MlogN),M为操作次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        节点类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">            <span class="type">int</span> ls, rs, add, max;   <span class="comment">// ls, rs 为左右子节点在tr中索引(触手); add 懒标记; max 维护区间最大值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>, M = <span class="number">120010</span>, cnt = <span class="number">1</span>; <span class="comment">// N 区间范围; M 节点个数; cnt 节点在tr中的索引</span></span><br><span class="line">        Node[] tr = <span class="keyword">new</span> <span class="title class_">Node</span>[M];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyCalendarTwo</span><span class="params">()</span> &#123;</span><br><span class="line">            tr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Node</span>(); <span class="comment">// 创建根节点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        更新区间[l,r] 值为val</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="comment">// [l,r]在u表示的区间内</span></span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) &#123;</span><br><span class="line">                tr[u].add += val;   <span class="comment">// 懒标记要累计(例如覆盖了2次)</span></span><br><span class="line">                <span class="comment">// 最大值是max(curVal,curVal+val)=curVal+val -&gt; max += val;</span></span><br><span class="line">                tr[u].max += val;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 结束</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// [l,r]不在u内</span></span><br><span class="line">            lazyCreate(u);  <span class="comment">// 动态开点</span></span><br><span class="line">            pushDown(u);    <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) update(tr[u].ls, lc, mid, l, r, val); <span class="comment">// 占据到左子树</span></span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) update(tr[u].rs, mid + <span class="number">1</span>, rc, l, r, val);  <span class="comment">// 占据到右子树</span></span><br><span class="line">            pushUp(u);  <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       查询区间[l,r]的最大值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> lc, <span class="type">int</span> rc, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lc &gt;= l &amp;&amp; rc &lt;= r) <span class="keyword">return</span> tr[u].max;</span><br><span class="line">            lazyCreate(u);  <span class="comment">// 冬天开点</span></span><br><span class="line">            pushDown(u);    <span class="comment">// 下传懒标记</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + (rc - lc) / <span class="number">2</span>, res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) res = query(tr[u].ls, lc, mid, l, r);</span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) res = Math.max(res, query(tr[u].rs, mid + <span class="number">1</span>, rc, l, r));   <span class="comment">// 记得取左右子节点的最大值</span></span><br><span class="line">            <span class="keyword">return</span> res; <span class="comment">// 返回最大值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按需动态开点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyCreate</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].ls == <span class="number">0</span>) &#123;    <span class="comment">// 左子节点不存在 -&gt; 创建并构建连接</span></span><br><span class="line">                tr[u].ls = cnt++;</span><br><span class="line">                tr[tr[u].ls] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].rs == <span class="number">0</span>) &#123;</span><br><span class="line">                tr[u].rs = cnt++;</span><br><span class="line">                tr[tr[u].rs] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        下传懒标记</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> tr[u].add;  <span class="comment">// 节点u下传下来的懒标记</span></span><br><span class="line">            <span class="keyword">if</span> (v != <span class="number">0</span>) &#123;   <span class="comment">// 当且仅当懒标记不为0才进行下传</span></span><br><span class="line">                <span class="comment">// 下传懒标记至子节点(累计)</span></span><br><span class="line">                tr[tr[u].ls].add += v;</span><br><span class="line">                tr[tr[u].rs].add += v;</span><br><span class="line">                <span class="comment">// 更新左右子节点的值(累计)</span></span><br><span class="line">                tr[tr[u].ls].max += v;</span><br><span class="line">                tr[tr[u].rs].max += v;</span><br><span class="line">                tr[u].add = <span class="number">0</span>;  <span class="comment">// 下传懒标记完成撤销u的懒标记</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        回溯更新u的最大值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">            tr[u].max = Math.max(tr[tr[u].ls].max, tr[tr[u].rs].max);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">book</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="comment">// 最大值&gt;=2说明区间[start,end-1]存在某个点覆盖了2次</span></span><br><span class="line">            <span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>) &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            update(<span class="number">0</span>, <span class="number">0</span>, N, start, end - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做完这两题估计对线段树有了充分了解了！</p><h3 id="3-差分数组-「区间修改-单点查询」：">3.差分数组-&gt;「区间修改 &amp; 单点查询」：</h3><p>差分区间求和:将每个区间覆盖信息转化为<strong>变化量</strong>记录,最后<strong>从头开始统计变化量</strong>就可以将总的变化量求出来</p><p>比喻成公交车:上车就表示该时刻t1-&gt;新区间加入乘客+1；下车就表示区间结束-&gt;下一个时刻(t2+1)乘客-1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] corpFlightBookings(<span class="type">int</span>[][] bookings, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="comment">//  注意航班编号为1-n</span></span><br><span class="line">        <span class="comment">// 变化量计数器:索引[0,n-1]</span></span><br><span class="line">        <span class="type">int</span>[] counter = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 遍历每个区间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] booking : bookings) &#123;</span><br><span class="line">            <span class="comment">// 因为航班编号为1-n,因此左偏移一位才是counter索引</span></span><br><span class="line">            counter[booking[<span class="number">0</span>] - <span class="number">1</span>] += booking[<span class="number">2</span>];</span><br><span class="line">            <span class="comment">// 这里原本有+1又向左偏移一位就是原本的,要判断区间是否合法</span></span><br><span class="line">            <span class="keyword">if</span>(booking[<span class="number">1</span>] &lt; n) counter[booking[<span class="number">1</span>]] -= booking[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 该站人数=上一站人数+该站变化量</span></span><br><span class="line">        <span class="comment">// 注意最初的一站就是0+counter[0]=counter[0]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            counter[i] += counter[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">区间求和的问题能涉及的方法有很多，包括前缀和、树状数组、差分数组等，降低时间复杂度是要义！</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树状数组" scheme="https://www.fomal.cc/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="线段树" scheme="https://www.fomal.cc/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="差分" scheme="https://www.fomal.cc/tags/%E5%B7%AE%E5%88%86/"/>
    
    <category term="前缀和" scheme="https://www.fomal.cc/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>并查集专题</title>
    <link href="https://www.fomal.cc/posts/226132e.html"/>
    <id>https://www.fomal.cc/posts/226132e.html</id>
    <published>2022-08-11T13:38:57.000Z</published>
    <updated>2022-08-11T13:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-并查集模板">1.并查集模板</h2><p>并查集是一种树型数据结构(多叉树)，可以高效地实现查找和合并功能，常用于求<strong>连通</strong>问题</p><p>1.每个数据可以看作一个节点</p><p>2.每一组数据都是一颗树</p><p>3.一个组中的数据对应的树和另外一个组中数据对应的树之间没有任何关系</p><p>4.初始化的时候把索引当作每个组的标识符</p><p><strong>并查集主要有三个功能：</strong></p><p>1.<strong>寻找根节点</strong>，函数：find(int u)，也就是判断这个节点的祖先节点是哪个</p><p>2.<strong>将两个节点接入到同一个集合</strong>，函数：join(int u, int v)，将两个节点连在同一个根节点上</p><p>3.<strong>判断两个节点是否在同一个集合</strong>，函数：same(int u, int v)，就是判断两个节点是不是同一个根节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1005</span>; <span class="comment">// 节点数量3 到 1000</span></span><br><span class="line"><span class="type">int</span>[] father = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// father[i]为节点i的父亲</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集初始化</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集寻根</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">    <span class="comment">// return u == father[u] ? u : father[u] = find(father[u]);</span></span><br><span class="line">    <span class="keyword">if</span>(father[u]!=u) father[u]=find(father[u]); <span class="comment">// 递归返回的同时压缩路径</span></span><br><span class="line">    <span class="keyword">return</span> father[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将v-&gt;u 这条边加入并查集(合并:其中u为根节点)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">    u = find(u);</span><br><span class="line">    v = find(v);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">    father[v] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断 u 和 v 是否位于同一个连通域(同根)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">same</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">    u = find(u);</span><br><span class="line">    v = find(v);</span><br><span class="line">    <span class="keyword">return</span> u == v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 每个连通域根节点都是独一无二的，因此可以通过某个节点寻根+HashMap统计出每个连通域的节点数量以及连通域个数等，而不用多一个字段值sum，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据图的信息构建连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">    join(e[<span class="number">0</span>], e[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于每个连通块的根都是唯一的,因此我们可以利用此来统计连通块内的元素个数</span></span><br><span class="line">HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">root</span> <span class="operator">=</span> find(i); <span class="comment">// 该连通域对应的根节点</span></span><br><span class="line">    map.put(root, map.getOrDefault(root, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map.size()</code>就是连通域数量；<code>map.get(find(x))</code>就是节点x所在连通域节点数量</p>]]></content>
    
    
    <summary type="html">并查集是一种树型数据结构(多叉树)，可以高效地实现查找和合并功能，常用于求连通问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://www.fomal.cc/tags/%E5%9B%BE/"/>
    
    <category term="并查集" scheme="https://www.fomal.cc/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>记忆化搜索专题</title>
    <link href="https://www.fomal.cc/posts/8802f5d3.html"/>
    <id>https://www.fomal.cc/posts/8802f5d3.html</id>
    <published>2022-08-11T13:36:09.000Z</published>
    <updated>2022-08-11T13:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第300场周赛"><a href="https://leetcode.cn/contest/weekly-contest-300/"><strong>第300场周赛</strong></a></h3><p>这次周赛的第3与第4题均可以用记忆化DFS进行求解，第一次尝试这种强大的方法，是动态规划的底层逻辑演算！记忆化DFS的首条件是出现子问题并且子问题数量有限</p><p>通过记忆化搜索可以将时间复杂度从2^N降低至O(N)</p><p><a href="https://leetcode.cn/problems/number-of-people-aware-of-a-secret/">6109. 知道秘密的人数</a></p><p>例如这一题的 dfs(i) 为第 i 天发现的秘密的人(包含自己在内)一共可以使得后面多少人知道秘密</p><p>我们可以怎样求dfs(i)？他可以由哪几个子问题的结果运算得到？</p><p>某个人在第 i 天知道秘密，则对应的传播阶段为 [min(i+delay,n),min(i+forget-1,n)] 记为 [a,b]</p><p>此时知道秘密的人数有dfs(i)=1+∑dfs(a,b) 其中1为自己本身</p><p>只需要处理好base case和memo，同时注意 i 本身也会忘记 就可以轻松写出来</p><p>这种一路dfs到底的写法，利用dfs递归返回的结果进行中间运算的方法称为非回溯型的写法</p><p>跟回溯写法的区别就是，回溯类型写法需要找到并保存所有的path</p><p>在这里我们只需要知道dfs(i)的计算值即可，因此这里dfs(i)带上返回参数int类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, delay, forget;</span><br><span class="line">    <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span>[] memo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peopleAwareOfSecret</span><span class="params">(<span class="type">int</span> _n, <span class="type">int</span> _delay, <span class="type">int</span> _forget)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Java 记忆化搜索:</span></span><br><span class="line"><span class="comment">        我们记dfs(i)为第i天发现的秘密的人包含自己在内一共可以使得后面多少人知道秘密</span></span><br><span class="line"><span class="comment">        i从i+delay天起,到i+forget-1天都是可以将秘密散播出去的</span></span><br><span class="line"><span class="comment">        也就是[min(i+delay,n),min(i+forget-1,n)]=[a,b]这个时间段是i的传播阶段</span></span><br><span class="line"><span class="comment">        此时知道秘密的人数有1+∑dfs(a,b)</span></span><br><span class="line"><span class="comment">        同时应该注意知道了秘密的人会忘记秘密,因此也会有一个期限</span></span><br><span class="line"><span class="comment">        这里由于子问题的出现可以使用记忆化减少搜索次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        n = _n;</span><br><span class="line">        delay = _delay;</span><br><span class="line">        forget = _forget;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 在第n天之后才能传播,说明只有自己知道</span></span><br><span class="line">        <span class="keyword">if</span> (i + delay &gt; n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 已经搜索过直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (memo[i] != <span class="number">0</span>) <span class="keyword">return</span> memo[i];</span><br><span class="line">        <span class="comment">// i传播的范围为[min(i+delay,n),min(i+forget-1,n)]=[a,b]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i + delay, b = Math.min(i + forget - <span class="number">1</span>, n);</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> i + forget &lt;= n ? <span class="number">0</span> : <span class="number">1</span>;    <span class="comment">// 自身到[i+forget]就忘记了,在n天内忘记了取0,反之取1</span></span><br><span class="line">        <span class="comment">// 合法的传播范围为[a,b]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> a; j &lt;= b; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> dfs(j);</span><br><span class="line">            memo[j] = t;    <span class="comment">// 标记</span></span><br><span class="line">            res = (res + t) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LC6110-网格图中递增路径的数目"><a href="https://leetcode.cn/problems/number-of-increasing-paths-in-a-grid/">LC6110. 网格图中递增路径的数目</a></h3><p>这道题一样时可以利用子问题的搜索结果减少计算量的题目</p><p>dfs(i,j)主逻辑:grid[i][j]出发的递增路径数=本身自成1条路径+上下左右出发严格递增路径数之和</p><p>另外用一个memo[i][j]保存从grid[i][j]出发的递增路径数</p><p>另外有一些细节：vis的标记方法与撤回、memo的标记方法（怎样才做到不重复标记）、取模技巧（可能溢出的变量要用long类型）等等…</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] memo, grid;</span><br><span class="line">    <span class="type">boolean</span>[][] vis;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPaths</span><span class="params">(<span class="type">int</span>[][] _grid)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dfs记忆化搜索:</span></span><br><span class="line"><span class="comment">        从每个格子出发搜索递增的路径数有多少</span></span><br><span class="line"><span class="comment">        有上下左右4个方向,合法的方向是比之前格子严格大的</span></span><br><span class="line"><span class="comment">        另外用一个memo[i][j]保存从grid[i][j]出发的递增路径数</span></span><br><span class="line"><span class="comment">        dfs(i,j)主逻辑:grid[i][j]出发的递增路径数=本身自成1条路径+上下左右出发严格递增路径数之和</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        grid = _grid;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];    <span class="comment">// 保存当前路径访问过的格子:回溯形式标记,递归出栈时候会恢复原状</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 统计每一个出发点的递增路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                vis[i][j] = <span class="literal">true</span>;   <span class="comment">// 进入dfs前标记搜索</span></span><br><span class="line">                res = (res + dfs(i, j)) % MOD;</span><br><span class="line">                vis[i][j] = <span class="literal">false</span>;  <span class="comment">// 撤回</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// 已经搜索过了,直接返回其数值</span></span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">// 本身自成一条严格递增路径</span></span><br><span class="line">        <span class="comment">// 一共有4个搜索方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newJ = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 越界||已经搜索过||大小不符合要求</span></span><br><span class="line">            <span class="keyword">if</span> (newI &lt; <span class="number">0</span> || newI &gt;= m || newJ &lt; <span class="number">0</span> || newJ &gt;= n || vis[newI][newJ] || grid[newI][newJ] &lt;= grid[i][j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            vis[newI][newJ] = <span class="literal">true</span>; <span class="comment">// 标记搜索</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> dfs(newI, newJ);    <span class="comment">// 下一点出发点路径数</span></span><br><span class="line">            vis[newI][newJ] = <span class="literal">false</span>;    <span class="comment">// 记得撤回访问标记,因为仅需要标记单一路径上的;从另外一点出发可以经过同一条路径</span></span><br><span class="line">            res = (res + t) % MOD;  <span class="comment">// 累加结果</span></span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = (<span class="type">int</span>) res; <span class="comment">// 标记grid[i][j]出发的路径数</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充：关于base-case与memo返回的先后顺序问题">补充：关于base case与memo返回的先后顺序问题</h3><p>这里建议都先写memo返回，然后再写base case，因为有些base case判断逻辑可能有较大的时间开销。</p><p><strong>base case 在前面：69ms</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">318</span>];</span><br><span class="line">    <span class="keyword">static</span> HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] memo = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100005</span>];  <span class="comment">// memo[i]=0表示还没赋值，1表示必输，2表示必赢</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理出可选状态</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">318</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i * i;</span><br><span class="line">            nums[i] = num;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">winnerSquareGame</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        记忆化DFS(1 &lt;= n &lt;= 10^5)</span></span><br><span class="line"><span class="comment">        我们记dfs(i)为剩余石头为i颗时，当前先手选择者是否可以赢得游戏，若能赢则为true，否则为false</span></span><br><span class="line"><span class="comment">        同时维护一个数据结构memo存储已经计算过的结果:memo[i]是已经计算过的dfs(i)</span></span><br><span class="line"><span class="comment">        我们预处理出一个可选的数目列表nums=[1,4,9,16,25,...]</span></span><br><span class="line"><span class="comment">        base case:</span></span><br><span class="line"><span class="comment">       剩余的石头数字恰好在列表当中出现，那么返回true，当前选择者另一个就没法选了</span></span><br><span class="line"><span class="comment">        dfs主逻辑:思考当前选择者可以做出的选择有哪些?</span></span><br><span class="line"><span class="comment">            显然可以从nums中选择 &lt; 当前剩余石头数目的石头j，而且当前选择者赢得游戏的充要条件是:</span></span><br><span class="line"><span class="comment">            选了石头之后下一个先手的输掉游戏，即dfs(i-j)==false，这么多种选择j中只需要一个为false即可</span></span><br><span class="line"><span class="comment">            于是用||条件进行连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> dfs(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (set.contains(i)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i] != <span class="number">0</span>) <span class="keyword">return</span> memo[i] == <span class="number">2</span>;  <span class="comment">// 记忆化加速</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">318</span> &amp;&amp; nums[j] &lt; i; j++) &#123;</span><br><span class="line">            <span class="comment">// 后手输了，先手必赢</span></span><br><span class="line">            <span class="keyword">if</span> (!dfs(i - nums[j])) &#123;</span><br><span class="line">                memo[i] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 后手在这种情况赢了，先手在后面还有机会赢</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后都不提前返回，说明先手必输了</span></span><br><span class="line">        memo[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>memo 在前面：20ms</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">318</span>];</span><br><span class="line">    <span class="keyword">static</span> HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] memo = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100005</span>];  <span class="comment">// memo[i]=0表示还没赋值，1表示必输，2表示必赢</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理出可选状态</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">318</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i * i;</span><br><span class="line">            nums[i] = num;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">winnerSquareGame</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        记忆化DFS(1 &lt;= n &lt;= 10^5)</span></span><br><span class="line"><span class="comment">        我们记dfs(i)为剩余石头为i颗时，当前先手选择者是否可以赢得游戏，若能赢则为true，否则为false</span></span><br><span class="line"><span class="comment">        同时维护一个数据结构memo存储已经计算过的结果:memo[i]是已经计算过的dfs(i)</span></span><br><span class="line"><span class="comment">        我们预处理出一个可选的数目列表nums=[1,4,9,16,25,...]</span></span><br><span class="line"><span class="comment">        base case:</span></span><br><span class="line"><span class="comment">       剩余的石头数字恰好在列表当中出现，那么返回true，当前选择者另一个就没法选了</span></span><br><span class="line"><span class="comment">        dfs主逻辑:思考当前选择者可以做出的选择有哪些?</span></span><br><span class="line"><span class="comment">            显然可以从nums中选择 &lt; 当前剩余石头数目的石头j，而且当前选择者赢得游戏的充要条件是:</span></span><br><span class="line"><span class="comment">            选了石头之后下一个先手的输掉游戏，即dfs(i-j)==false，这么多种选择j中只需要一个为false即可</span></span><br><span class="line"><span class="comment">            于是用||条件进行连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> dfs(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (memo[i] != <span class="number">0</span>) <span class="keyword">return</span> memo[i] == <span class="number">2</span>;  <span class="comment">// 记忆化加速</span></span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (set.contains(i)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">318</span> &amp;&amp; nums[j] &lt; i; j++) &#123;</span><br><span class="line">            <span class="comment">// 后手输了，先手必赢</span></span><br><span class="line">            <span class="keyword">if</span> (!dfs(i - nums[j])) &#123;</span><br><span class="line">                memo[i] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 后手在这种情况赢了，先手在后面还有机会赢</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后都不提前返回，说明先手必输了</span></span><br><span class="line">        memo[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记忆化DFS是一种强大的处理有限状态问题的方法，是动态规划的底层逻辑演算！</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="DFS" scheme="https://www.fomal.cc/tags/DFS/"/>
    
    <category term="记忆化DFS" scheme="https://www.fomal.cc/tags/%E8%AE%B0%E5%BF%86%E5%8C%96DFS/"/>
    
  </entry>
  
  <entry>
    <title>区间DP专题总结</title>
    <link href="https://www.fomal.cc/posts/3cc9359b.html"/>
    <id>https://www.fomal.cc/posts/3cc9359b.html</id>
    <published>2022-08-11T13:31:46.000Z</published>
    <updated>2022-08-11T13:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>区间DP是指以区间左右边界 f[i][j] 作为动态规划变量的问题</p><p>一般求解步骤：</p><p>1.状态定义：f[i][j] 为<strong>求解分区间 [i,j] 重复子问题的开销</strong>，其中 i&lt;=j</p><p>2.状态转移：求f[i][j]通常要考虑<strong>将 [i, j] 区间分为两个重复子问题</strong></p><p>这个根据具体的问题而定，有的可能要根据s[i]与s[j]是否相等做出不同的转移，如 <a href="https://leetcode.cn/problems/strange-printer/">664. 奇怪的打印机</a></p><p>有的可能是选择直接枚举分割点k，然后建立 [i, j] 区间与 左右子区间的转移，如 <a href="https://leetcode.cn/problems/guess-number-higher-or-lower-ii/">375. 猜数字大小 II</a></p><p>有的还可能不是分割区间，而是利用缩小区间 [i+1,j] 的子问题与 [i, j] 区间建立连接，如 <a href="https://leetcode-cn.com/problems/stone-game/">877. 石子游戏</a></p><p>3.初始化：通常来说要初始化<strong>长度为1的边界状态 f[i][i] 的值</strong>，为接下来的遍历做好初值准备</p><p>4.遍历顺序：这里有两种遍历的方法，推荐<strong>以遍历长度len</strong>的方法</p><p><strong>4.1 长度len为基础进行遍历</strong></p><p>1.遍历长度len(正序2~n)；</p><p>2.遍历左边界i(正序0~i+len-1==n-1)；</p><p>3.遍历分割点k(正反序无所谓i~j-1)</p><p>​      <strong>4.2 i与j为基础进行遍历</strong></p><p>1.枚举左端点i(倒序n-2~0)</p><p>2.枚举右端点j(正序i+1~n-1)</p><p>3.枚举分割点k(正反序无所谓i~j-1)</p><p>此时以k分割后的左右子区间分别为：[i,k] 与 [k+1,j]</p><p>示意图如下：可知分割区间依赖于正下方和正左方的状态有效值-&gt;<strong>遍历长度是以“滑梯”的方式下去的；遍历i与j是从底下上来的</strong></p><p><img src="../images/p9.jpg" alt="p9"></p><p>5.返回形式：一般来说返回 <strong>f[0][n-1]</strong> 就是关于整个区间对应的子问题答案</p><p>复杂度分析：一般地，时间复杂度:O(N^3)；空间复杂度:O(N^2)</p><p><a href="https://leetcode.cn/problems/guess-number-higher-or-lower-ii/"><strong>375. 猜数字大小 II</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoneyAmount</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        解法2：区间DP</span></span><br><span class="line"><span class="comment">        1.状态定义:f[i][j]为确保猜中区间[i,j]至少需要的金额，其中 j&gt;=i &amp;&amp; i,j∈[1,n]</span></span><br><span class="line"><span class="comment">        2.状态转移:要想求解f[i][j]就要考虑f[i][k-1]与f[k+1][j]</span></span><br><span class="line"><span class="comment">            其中k为区间的分割点（某次猜的数字为k），遍历k∈[i,j]，求得该次稳赢的开销为 k+max(f[i][k-1],f[k+1][j])</span></span><br><span class="line"><span class="comment">            遍历k过程中维护[i,j]区间分割成两个区间后的最小值min，那么min就是f[i][j]的值</span></span><br><span class="line"><span class="comment">        3.初始化:f[i][j]=0 其中i&gt;=j</span></span><br><span class="line"><span class="comment">        4.遍历顺序:求f[i][j]要用到f[i][k-1]与f[k+1][j] 那么j正序 i倒序 k无所谓</span></span><br><span class="line"><span class="comment">        5.返回形式:返回f[1][n]就是答案</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 遍历左边界i∈[n,1]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 遍历右边界j∈[i+1,n] 注意j=i为0 强行转移会发生错误</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> INF;</span><br><span class="line">                <span class="comment">// 遍历分界线k∈[i,j]</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt;= j; k++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> k + Math.max(f[i][k - <span class="number">1</span>], f[k + <span class="number">1</span>][j]);   <span class="comment">// 本次猜k的稳赢的开销</span></span><br><span class="line">                    min = Math.min(min, cur);   <span class="comment">// 这么多种选择的最小开销</span></span><br><span class="line">                &#125;</span><br><span class="line">                f[i][j] = min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">1</span>][n];     <span class="comment">// 选择[1,n]中稳赢的最小开销</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/strange-printer/"><strong>664. 奇怪的打印机</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strangePrinter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法2：区间DP</span></span><br><span class="line"><span class="comment">        1.状态定义:f[i][j]为打印s[i,j]所需要的最少打印次数（i&lt;=j）</span></span><br><span class="line"><span class="comment">        2.状态转移:求f[i][j]就要考虑s[i]与s[j]</span></span><br><span class="line"><span class="comment">            2.1 当s[i]==s[j]时 s[i]与s[j]其中一个可以顺路打印 f[i][j]=f[i][j-1]</span></span><br><span class="line"><span class="comment">            2.1 当s[i]=!s[j]时 枚举分割点，分割点两边的次数加起来取最小值就是答案(只取最优的打印次数转移)</span></span><br><span class="line"><span class="comment">                f[i][j]=min(f[i][k]+f[k+1][j]) 其中k∈[i,j-1]</span></span><br><span class="line"><span class="comment">        3.初始化:初始化f[i][i]=1 单个字符最少打印1次</span></span><br><span class="line"><span class="comment">        4.遍历顺序:Loop1-&gt;遍历长度len(正序)  Loop2-&gt;遍历左边界i(正序)  Loop3-&gt;遍历分割点k(正序)</span></span><br><span class="line"><span class="comment">            另一个遍历角度:枚举左端点i(倒序n-2~0) 枚举右端点j(正序i~n-1) 枚举分割点k(没所谓i~j-1)</span></span><br><span class="line"><span class="comment">        5.返回形式:返回f[0][n-1]就是打印s[0,n-1]所需要的最小打印次数</span></span><br><span class="line"><span class="comment">        时间复杂度:O(N^3) 空间复杂度:O(N^2)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), INF = <span class="number">101</span>;</span><br><span class="line">        <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">// 打印1个字符只需要1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            f[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 枚举长度len∈[2,len]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">            <span class="comment">// 枚举左端点i∈[0,n-len]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + len - <span class="number">1</span> &lt; n; i++) &#123;</span><br><span class="line">                <span class="comment">// j为右端点</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + len - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// s[i]==s[j] 顺路打印</span></span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                    f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> INF;  <span class="comment">// 最多的打印次数</span></span><br><span class="line">                    <span class="comment">// 枚举分割点k∈[i,j-1]</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">                        <span class="comment">// 维护最小的打印次数</span></span><br><span class="line">                        min = Math.min(min, f[i][k] + f[k + <span class="number">1</span>][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    f[i][j] = min;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>记忆化DFS解法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line">    <span class="type">char</span>[] chs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strangePrinter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法1：记忆化DFS:</span></span><br><span class="line"><span class="comment">        关注子问题，每当打印一段涉及到的变量为的当前打印区间的左右边界s[i,j]</span></span><br><span class="line"><span class="comment">        因此定义dfs(i,j)为打印s[i,j]需要的最少打印次数</span></span><br><span class="line"><span class="comment">        此时情况分为2种：</span></span><br><span class="line"><span class="comment">        1.当s[i]==s[j]时，打印s[i]时可以同时把s[j]也打印了，因此总的次数为dfs(i,j-1)</span></span><br><span class="line"><span class="comment">        2.当s[i]!=s[j]时，打印s[i]时不能同时把s[j]也打印</span></span><br><span class="line"><span class="comment">            假设中间的字母都不相同的情况下，总的次数需要dfs(i,j-1)+1，即每个字母都要独立打印</span></span><br><span class="line"><span class="comment">            但是s[i...k...j]中间的s[k]可能与s[i]或者s[j]相等，此时的打印次数可以减少，因为可以顺带打印</span></span><br><span class="line"><span class="comment">            那么就要枚举s[i,j]之间的分割点s[k]，其中k∈[i,j-1]，分割后的区间为s[i,k]与s[k+1,j]</span></span><br><span class="line"><span class="comment">            最少的打印次数为多少？答案为min(dfs(i,k)+dfs(k+1,j)) 中间可以顺带打印的都经过了最优的状态转移</span></span><br><span class="line"><span class="comment">        最后返回dfs(0,n-1)就是答案</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        chs = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> chs.length;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dfs(i,j):打印s[i,j]需要的最少打印次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// memo中存在该状态直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (i == j) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// s[i]==s[j]</span></span><br><span class="line">        <span class="keyword">if</span> (chs[i] == chs[j]) <span class="keyword">return</span> dfs(i, j - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">            min = Math.min(min, dfs(i, k) + dfs(k + <span class="number">1</span>, j)); <span class="comment">// 取最小分割位置赋值到dfs(i,j)</span></span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = min;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实能用动态规划解决的问题都可以用记忆化DFS解决</p><p>记忆化DFS的优点就是不用考虑具体的状态遍历顺序是怎样的，只要能够判断出memo里面的状态被有效值覆盖过就可以直接拿来用，因此可以将 memo[i][j] 的值初始化为一个不可能到达的值INF</p><p>模板中一般包含一下几个关键点：</p><p>1.每次递归返回之前记录该次最优值进入memo memo[i][j] = min;</p><p>2.若dfs(i,j)中的memo[i][j]的有效值已经出现过可以直接取 if (memo[i][j] != 0) return memo[i][j];</p><p>3.base case 一般来说是 if (i == j) return ?;</p><p>4.遍历与dfs(i,j)有关的状态（结果），选择最优的（经过计算）得到的结果作为dfs(i,j)的结果 视具体问题而定</p>]]></content>
    
    
    <summary type="html">区间DP是指以区间左右边界f[i][j]作为动态规划变量的问题</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="区间DP" scheme="https://www.fomal.cc/tags/%E5%8C%BA%E9%97%B4DP/"/>
    
    <category term="动态规划" scheme="https://www.fomal.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>数位DP总结</title>
    <link href="https://www.fomal.cc/posts/d795dbaa.html"/>
    <id>https://www.fomal.cc/posts/d795dbaa.html</id>
    <published>2022-08-11T13:24:43.000Z</published>
    <updated>2022-08-11T13:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-三叶的模板">1.三叶的模板</h4><p>位DP是一种比较抽象和难理解的DP题型，什么时候会用到数位DP去解题？</p><p>一般来说，当遇到求 [a,b] 内满足一定条件的数字有多少个时，大概率会用到数位DP</p><p>设 f[i] 为 [0,i] 满足条件的数字个数，那么[a, b] 内的符合要求数目就是 f[b]-f[a]</p><p>三叶的数位DP方面总结得比较系统，题解也是比较模板化的，<strong>建议按照模板来</strong>，大致梳理一下模板和思路如下：</p><p>将 [0,n] 的数字分为3部分：</p><p>1.<strong>res1</strong> <strong><em>位数小于n</em><strong>的部分 这部分一般可以通过</strong>乘法原理</strong>求解</p><p>2.<strong>res2</strong> <strong><em>位数等于n且最高位小于n部分</em></strong> 这部分也可以用乘法原理进行求解，<strong>枚举最高位可用的情形然后利用乘法原理计算</strong></p><p>3.<strong>res3</strong> <strong><em>位数等于n且最高位等于n部分</em></strong> 这部分是最难的，因为每一位的取值严格被限制了，需要用到DP的思想进行求解</p><p>（注意这个res3不一定是n的最高位，是遍历过程中作为状态值动态变化的）</p><p>res2与res3一般放在一起求解，套路如下：</p><p>从<strong>高位向低位</strong>枚举，假设当前位数字为cur，其中res2部分可以通过乘法原理计算得到</p><p>res3部分需要由 <strong>当前位的后面位方案</strong>数 决定，这里就有了子问题的复现了，原问题与子问题的维度差异就是子问题比原问题少了原来的最高位</p><p>以 LC 1012为例</p><p>res2 = [0,cur-1]能用的数字数 * 后面剩余位数的排列数</p><p><code>res3相当于固定了当前位为最大值cur，再看后面位总的方案数，通过for循环一直遍历至最后一位(或者是出现重复的一位)</code></p><p>还有一个细节就是别漏了最大数本身也符合要求这种情形</p><p>排列数的情形有限，我们可以预处理出来所有排列数来加快计算速度</p><p>最后再累加上res1的方案数就是答案</p><p><a href="https://leetcode.cn/problems/numbers-with-repeated-digits/"><strong>1012. 至少有 1 位重复的数字</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 预处理排列数 f[i][j]=i*(i+1)*...*(j-1)*j</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt;= j; k++) &#123;</span><br><span class="line">                    cur *= k;</span><br><span class="line">                &#125;</span><br><span class="line">                f[i][j] = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDupDigitsAtMostN</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        数位DP(较难):</span></span><br><span class="line"><span class="comment">        本题可以转化为求[1,n]全部数字不相同的数字个数，是典型的数位DP问题</span></span><br><span class="line"><span class="comment">        数位DP问题求解的总体思路就是求[0,n]中满足某些条件的数字个数</span></span><br><span class="line"><span class="comment">        通常套路就是将[0,n]的数字分为3部分：</span></span><br><span class="line"><span class="comment">        1.res1 位数小于n的部分 这部分与 LC357 解法一致，利用乘法原理求解</span></span><br><span class="line"><span class="comment">        2.res2 位数等于n的部分且最高位小于n 这部分也可以用乘法原理进行求解，枚举最高位直接计算就可以</span></span><br><span class="line"><span class="comment">        3.res3 位数等于n的部分且最高位等于n 这部分是最难的，因为每一位的取值严格被限制了，需要用到DP的思想进行求解</span></span><br><span class="line"><span class="comment">        res2与res3一般放在一起求解，套路如下：</span></span><br><span class="line"><span class="comment">        从高位向低位枚举，假设当前位为cur，其中res2部分可以通过乘法原理计算得到</span></span><br><span class="line"><span class="comment">        res3部分需要由  当前位的后面位方案数  决定</span></span><br><span class="line"><span class="comment">        具体的，res2=[0,cur-1]能用的数字数*后面剩余位数的排列数</span></span><br><span class="line"><span class="comment">                res3相当于固定了当前位为最大值cur，再看后面位的总的方案数，通过for循环一直遍历至最后一位(或者是出现重复的一位)</span></span><br><span class="line"><span class="comment">                排列数的情形有限，我们可以预处理出来加快计算速度</span></span><br><span class="line"><span class="comment">        时间复杂度:O(logN)  空间复杂度:O(C)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> n - dp(n) + <span class="number">1</span>;   <span class="comment">// 注意排除掉0的情况</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[x]返回[0,x]中每一位都不同的数字数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 一位数直接返回x+1(因为包含0)</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">9</span>) <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 将x每一位提出来</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(x % <span class="number">10</span>);</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitCnt</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 1.计算res1+res2部分</span></span><br><span class="line">        <span class="comment">// 其中i为数字x的位索引，i越大表示位数越高(越左)</span></span><br><span class="line">        <span class="comment">// p记录当前循环到的位置已经遍历了多少位</span></span><br><span class="line">        <span class="comment">// used标记当前遍历过程中已经用了的哪些数字，到时候根据used排除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bitCnt - <span class="number">1</span>, used = <span class="number">0</span>, p = <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, p++) &#123;</span><br><span class="line">            <span class="comment">// 首先计算当前位cur能用的数字个数cnt</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> list.get(i), cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 枚举[cur-1,0]，再排除掉前面已经用过的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> cur - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="comment">// 最高位可以用[cur-1,1]</span></span><br><span class="line">                <span class="keyword">if</span> (i == bitCnt - <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt = cur - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 低位可以用[cur-1,0]没用过的任意数</span></span><br><span class="line">                <span class="keyword">if</span> (((used &gt;&gt; j) &amp; <span class="number">1</span>) == <span class="number">0</span>) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算res2部分</span></span><br><span class="line">            <span class="comment">// 合法值 a&gt;=b 其中a为cur后面首位选择数，b为终点(最后一位)的选择数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> - p, b = a - (bitCnt - p) + <span class="number">1</span>;</span><br><span class="line">            res += cnt * (i &gt; <span class="number">0</span> ? f[b][a] : <span class="number">1</span>);    <span class="comment">// 特例为最后一位的时候可以选cnt个</span></span><br><span class="line">            <span class="comment">// 已经遇到相同数字，统计完cnt次以后([0,cur-1]的情况)就可以退出</span></span><br><span class="line">            <span class="keyword">if</span> (((used &gt;&gt; cur) &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) res++;  <span class="comment">// 当x本身就是合法案例，最后一位加完cnt之后还要再+1</span></span><br><span class="line">            used |= (<span class="number">1</span> &lt;&lt; cur);  <span class="comment">// 标记使用了cur</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.计算res3部分(位数小于x的部分)</span></span><br><span class="line">        res += <span class="number">10</span>;  <span class="comment">// 先统计一位数的情况</span></span><br><span class="line">        <span class="comment">// 统计后面的[2,bitCnt-1]位:9*9  9*9*8  9*9*8*7 ...</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; bitCnt; i++) &#123;</span><br><span class="line">            res += <span class="number">9</span> * f[<span class="number">11</span> - i][<span class="number">9</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-灵佬的模板（推荐）">2.灵佬的模板（推荐）</h4><p><a href="https://leetcode.cn/problems/count-special-integers/">2376. 统计特殊整数</a></p><p>参考灵神写的记忆化DFS解决数位DP问题的模板，非常好用，几乎可以“秒杀”任何类型的数位DP！</p><p><strong>记忆化本质就是减少前面已选状态一致的情况，将1eM的时间复杂度压缩至1&lt;&lt;M，效率非常高</strong></p><p><strong>详细参考：<a href="https://leetcode.cn/problems/count-special-integers/solution/shu-wei-dp-mo-ban-by-endlesscheng-xtgx/">数位 DP 通用模板，附题单（Python/Java/C++/Go）</a></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] memo;   <span class="comment">// memo[i][mask]记录当前选择顺位为i，已选状态为mask时，构造第i位及后面位的合法方案数</span></span><br><span class="line">    <span class="type">char</span>[] s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSpecialNumbers</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        参考灵神の数位DP记忆化DFS模板：</span></span><br><span class="line"><span class="comment">        注意这题与LC1012是一样的，不过这题更直接求每一位都不相同数字</span></span><br><span class="line"><span class="comment">        dfs(i, mask, isLimit, hasNum) 代表从左到右选到第i个数字时(i从0开始)，前面数字已选状态为mask时的合法方案数</span></span><br><span class="line"><span class="comment">        各个参数的含义如下:</span></span><br><span class="line"><span class="comment">        i:当前选择的数字位次，从0开始</span></span><br><span class="line"><span class="comment">        mask:前面已择数字的状态，是一个10位的二进制数，如:0000000010就代表前面已经选了1</span></span><br><span class="line"><span class="comment">        isLimit:boolean类型，代表当前位选择是否被前面位的选择限制了；</span></span><br><span class="line"><span class="comment">            如n=1234，前面选了12，选第3位的时候会被限制在0~3，isLimit=true；否则是0~9，isLimit=false</span></span><br><span class="line"><span class="comment">        hasNum:表示前面是否已经选择了数字，若选择了就为true(识别直接构造低位的情况)</span></span><br><span class="line"><span class="comment">        时间复杂度:O(1024*M*10) 空间复杂度:O(1024*M)</span></span><br><span class="line"><span class="comment">        记忆化DFS的时间复杂度=状态数*每一次枚举的情况数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        s = String.valueOf(n).toCharArray();    <span class="comment">// 转化为字符数组形式</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];     <span class="comment">// i∈[0,m-1]，mask为一个10位二进制数</span></span><br><span class="line">        <span class="comment">// 初始化memo为-1代表该顺位下该已选状态还没进行计算</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            Arrays.fill(memo[i], -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意一开始最高位是有限制的，isLimit=true</span></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dfs(i, mask, isLimit, hasNum) 代表从左到右选第i个数字时，前面已选状态为mask时的合法方案数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> mask, <span class="type">boolean</span> isLimit, <span class="type">boolean</span> hasNum)</span> &#123;</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="comment">// i越过最后一位，此时前面选了就算一个，没选的就不算，因为不选后面也没得选了</span></span><br><span class="line">        <span class="keyword">if</span> (i == s.length) <span class="keyword">return</span> hasNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 已经计算过该状态，并且该状态是有效的，直接返回该状态</span></span><br><span class="line">        <span class="comment">// 这一步是降低时间复杂度的关键，使得记忆化dfs的时间复杂度控制得很低</span></span><br><span class="line">        <span class="comment">// !isLimit表示没有被限制的才可以直接得出结果，否则还要根据后面的数字进行计算子问题计算</span></span><br><span class="line">        <span class="keyword">if</span> (!isLimit &amp;&amp; hasNum &amp;&amp; memo[i][mask] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i][mask];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 结果</span></span><br><span class="line">        <span class="comment">// 本位可以取0(可直接构造低位数)的情况，此时要加上构造低位数0xxx的方案数</span></span><br><span class="line">        <span class="comment">// 将是否选了数字作为分类条件是为了避免出现00010这样有多个0的就不能统计了</span></span><br><span class="line">        <span class="keyword">if</span> (!hasNum) res = dfs(i + <span class="number">1</span>, mask, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 构造与当前顺位相同位数的数字就要枚举可选的数字进行DFS</span></span><br><span class="line">        <span class="comment">// 枚举的起点要视hasNum而定，如果前面选择了数字，那么现在可以选0；否则只能从1开始</span></span><br><span class="line">        <span class="comment">// 枚举得终点视isLimit而定，若被限制了只能到s[i]，否则可以到9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> hasNum ? <span class="number">0</span> : <span class="number">1</span>, end = isLimit ? s[i] - <span class="string">&#x27;0&#x27;</span> : <span class="number">9</span>; k &lt;= end; k++) &#123;</span><br><span class="line">            <span class="comment">// 如果该数字k还没有被选中，那猫就可以选该位数字</span></span><br><span class="line">            <span class="keyword">if</span> (((mask &gt;&gt; k) &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 方案数遵循加法原理</span></span><br><span class="line">                <span class="comment">// i:进行下一位的DFS，因此为i+1</span></span><br><span class="line">                <span class="comment">// mask:由于该位选中了k，mask掩膜传下去就要更新，已选状态加上k</span></span><br><span class="line">                <span class="comment">// isLimit:当且仅当前面的被限制了且该位被限制</span></span><br><span class="line">                <span class="comment">// hasNum:该位选了必定为true</span></span><br><span class="line">                res += dfs(i + <span class="number">1</span>, mask | (<span class="number">1</span> &lt;&lt; k), isLimit &amp;&amp; k == end, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isLimit &amp;&amp; hasNum) memo[i][mask] = res;    <span class="comment">// 如果前面没有限制，表明后面都是同质的，可以记录进memo中</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数位DP是一种比较抽象和难理解的DP题型，这篇文章总结数位DP一些思想和解题方法</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://www.fomal.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="数位DP" scheme="https://www.fomal.cc/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>多源BFS总结</title>
    <link href="https://www.fomal.cc/posts/3efa1ce7.html"/>
    <id>https://www.fomal.cc/posts/3efa1ce7.html</id>
    <published>2022-08-11T13:09:18.000Z</published>
    <updated>2022-08-11T13:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1020-飞地的数量">1.<a href="https://leetcode.cn/problems/number-of-enclaves/">1020. 飞地的数量</a></h3><p>BFS标记已经搜索过的格子避免重复搜索，一定一定要在入队时候就标记搜索</p><p><strong>如果在出队时才标记搜索，那么下一层的节点可能会把上一层的重复入队，因为上一层前面的节点出队了，后面的还没出队因此还视为未被搜索，有重复入队的风险！</strong></p><p><strong>1.常规单源BFS解法：5ms</strong> <strong>48.8 MB</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[][] canReach;  <span class="comment">// canReach记录grid[i][j]是否能到达边界</span></span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numEnclaves</span><span class="params">(<span class="type">int</span>[][] _grid)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        多源BFS:</span></span><br><span class="line"><span class="comment">        有一个技巧，要越过边界一定要经过边界，那么我们要求中间有哪些不能到达边界的，反过来就是要求哪些能到达边界的</span></span><br><span class="line"><span class="comment">        再反过来只需要从边界开始DFS看看能到达哪些陆地即可，再用总的陆地数减去能到达边界的陆地数就是不能到达的陆地数</span></span><br><span class="line"><span class="comment">        遍历格子的方式也可以是BFS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        grid = _grid;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        canReach = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="comment">// 搜索4条边界的陆地</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="number">1</span>) bfs(i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (grid[i][n - <span class="number">1</span>] == <span class="number">1</span>) bfs(i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[<span class="number">0</span>][j] == <span class="number">1</span>) bfs(<span class="number">0</span>, j);</span><br><span class="line">            <span class="keyword">if</span> (grid[m - <span class="number">1</span>][j] == <span class="number">1</span>) bfs(m - <span class="number">1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计不能到达边界的数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span> &amp;&amp; !canReach[i][j]) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dfs(i,j)搜索与之连接的陆地并标记到canReach</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// grid[i][j]可以到达边界说明与之连通的已经搜索过了，结束</span></span><br><span class="line">        <span class="keyword">if</span> (canReach[i][j]) <span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        canReach[i][j] = <span class="literal">true</span>;  <span class="comment">// 统一入队标记搜索(速度快很多避免重复搜索)</span></span><br><span class="line">        que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = que.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 搜索4个方向</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 位于区域内并且是陆地就可以到达，且不能搜回头路</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt;= m - <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt;= n - <span class="number">1</span> &amp;&amp; grid[newX][newY] == <span class="number">1</span> &amp;&amp; !canReach[newX][newY]) &#123;</span><br><span class="line">                        canReach[newX][newY] = <span class="literal">true</span>;  <span class="comment">// 统一入队标记搜索</span></span><br><span class="line">                        que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.多源BFS写法：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[][] canReach;  <span class="comment">// canReach记录grid[i][j]是否能到达边界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numEnclaves</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        多源BFS:</span></span><br><span class="line"><span class="comment">        有一个技巧，要越过边界一定要经过边界，那么我们要求中间有哪些不能到达边界的，反过来就是要求哪些能到达边界的</span></span><br><span class="line"><span class="comment">        再反过来只需要从边界开始BFS看看能到达哪些陆地即可，再用总的陆地数减去能到达边界的陆地数就是不能到达的陆地数</span></span><br><span class="line"><span class="comment">        这是多个源点的BFS，我们可以把多个节点同时入队，相当于开始就进行第二层的BFS</span></span><br><span class="line"><span class="comment">        时间复杂度:O(N^2)  空间复杂度:O(N)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 搜索4条边界的陆地</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                grid[i][<span class="number">0</span>] = <span class="number">2</span>; <span class="comment">// 访问过与边缘连通的陆地标记为2</span></span><br><span class="line">                que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, <span class="number">0</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][n - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                grid[i][n - <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, n - <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[<span class="number">0</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                grid[<span class="number">0</span>][j] = <span class="number">2</span>;</span><br><span class="line">                que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (grid[m - <span class="number">1</span>][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                grid[m - <span class="number">1</span>][j] = <span class="number">2</span>;</span><br><span class="line">                que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;m - <span class="number">1</span>, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = que.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 搜索4个方向</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 位于区域内并且是陆地就可以到达，且不能搜回头路</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt;= m - <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt;= n - <span class="number">1</span> &amp;&amp; grid[newX][newY] == <span class="number">1</span>) &#123;</span><br><span class="line">                        grid[newX][newY] = <span class="number">2</span>;</span><br><span class="line">                        que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计不能到达边界的数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) res++; <span class="comment">// 为1的就是无法到达边界的陆地</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.DFS解法：4ms 48.7 MB</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[][] canReach;  <span class="comment">// canReach记录grid[i][j]是否能到达边界</span></span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numEnclaves</span><span class="params">(<span class="type">int</span>[][] _grid)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        记忆化DFS:</span></span><br><span class="line"><span class="comment">        有一个技巧，要越过边界一定要经过边界，那么我们要求中间有哪些不能到达边界的，反过来就是要求哪些能到达边界的</span></span><br><span class="line"><span class="comment">        再反过来只需要从边界开始DFS看看能到达哪些陆地即可，再用总的陆地数减去能到达边界的陆地数就是不能到达的陆地数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        grid = _grid;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        canReach = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="comment">// 搜索4条边界的陆地</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="number">1</span>) dfs(i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (grid[i][n - <span class="number">1</span>] == <span class="number">1</span>) dfs(i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[<span class="number">0</span>][j] == <span class="number">1</span>) dfs(<span class="number">0</span>, j);</span><br><span class="line">            <span class="keyword">if</span> (grid[m - <span class="number">1</span>][j] == <span class="number">1</span>) dfs(m - <span class="number">1</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计不能到达边界的数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span> &amp;&amp; !canReach[i][j]) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dfs(i,j)搜索与之连接的陆地并标记到canReach</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// grid[i][j]可以到达边界说明与之连通的已经搜索过了，结束</span></span><br><span class="line">        <span class="keyword">if</span> (canReach[i][j]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 标记与边界连通</span></span><br><span class="line">        canReach[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 搜索4个方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newJ = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 位于区域内并且是陆地就可以到达</span></span><br><span class="line">            <span class="keyword">if</span> (newI &gt;= <span class="number">0</span> &amp;&amp; newI &lt;= m - <span class="number">1</span> &amp;&amp; newJ &gt;= <span class="number">0</span> &amp;&amp; newJ &lt;= n - <span class="number">1</span> &amp;&amp; grid[newI][newJ] == <span class="number">1</span>) &#123;</span><br><span class="line">                dfs(newI, newJ);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1162-地图分析">2.<a href="https://leetcode.cn/problems/as-far-from-land-as-possible/"><strong>1162. 地图分析</strong></a></h3><p><strong>多源BFS实际就是单源BFS的第二层，在前面加上一个超级源点指向最初入队的节点，就是普通的单源BFS</strong></p><p><strong>参考：</strong><a href="https://leetcode.cn/problems/as-far-from-land-as-possible/solution/zhen-liang-yan-sou-huan-neng-duo-yuan-kan-wan-miao/"> <strong>ʚ自在飞花ɞ | 多个源点的广搜</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDistance</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        多源BFS问题(相当于单源BFS从第2层开始):</span></span><br><span class="line"><span class="comment">        这题是最短路径问题，求某个0到达1的最短路径的最大值</span></span><br><span class="line"><span class="comment">        求最短路径，首先想到的就是BFS，可以枚举每个格子0求出每个海洋到达陆地的最近距离，取最大值</span></span><br><span class="line"><span class="comment">        这样做的时间复杂度为O(n^4)≈1e8 必定TLE</span></span><br><span class="line"><span class="comment">        不妨反过来，我们从陆地1出发进行多源点的BFS</span></span><br><span class="line"><span class="comment">        每一圈到达的海洋0都是陆地到达的该海洋的最短路径，也就是说是这个海洋到达陆地的最短路径</span></span><br><span class="line"><span class="comment">        那么遍历到最后一层就是陆地1到达海洋0的最短路径最大值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 所有的陆地入队(相当于单源BFS的第二层)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 全是海洋或者陆地返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (que.size() == m * n || que.size() == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dis</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = que.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// grid[newX][newY]在区域内且为没有被访问过的海洋</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt;= m - <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt;= n - <span class="number">1</span> &amp;&amp; grid[newX][newY] == <span class="number">0</span>) &#123;</span><br><span class="line">                        grid[newX][newY] = <span class="number">2</span>; <span class="comment">// 访问过的海洋记为2就不会重复访问</span></span><br><span class="line">                        que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dis++;  <span class="comment">// 每一圈距离+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在矩阵中，关于BFS入队的类型，可以为int[] 类型的[x,y]，也可以将其化为int类型后面再进行解析</strong></p><h3 id="3-1765-地图中的最高点">3.<a href="https://leetcode.cn/problems/map-of-highest-peak/"><strong>1765. 地图中的最高点</strong></a></h3><p><strong>1.常规写法：44 ms  136.9 MB</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] highestPeak(<span class="type">int</span>[][] isWater) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        多源BFS：</span></span><br><span class="line"><span class="comment">        矩阵就是4方向的无向图</span></span><br><span class="line"><span class="comment">        这题要求的是从某个水域1出发后的BFS的层数能达到的方案值对应的矩阵，且任意相邻的格子高度差 至多 为 1</span></span><br><span class="line"><span class="comment">        多源的BFS解法就是首先让可以入队的水域1全部一次入队，遇到下一个格子直接等于本格子的值+1</span></span><br><span class="line"><span class="comment">        遍历完之后会出现最大值，最后的矩阵就是答案</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> isWater.length, n = isWater[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这里规定为水域为0，没有访问的土地为-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isWater[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    isWater[i][j] = <span class="number">0</span>;</span><br><span class="line">                    que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    isWater[i][j] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = que.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 在区域内且没有被访问过的土地才能BFS</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt;= m - <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt;= n - <span class="number">1</span> &amp;&amp; isWater[newX][newY] == -<span class="number">1</span>) &#123;</span><br><span class="line">                        isWater[newX][newY] = isWater[x][y] + <span class="number">1</span>;</span><br><span class="line">                        que.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isWater;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>化为int类型后：45 ms 158.2 MB</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] highestPeak(<span class="type">int</span>[][] isWater) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> isWater.length, n = isWater[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        Queue&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();    <span class="comment">// 用int代替[x,y]数组</span></span><br><span class="line">        <span class="comment">// 这里规定为水域为0，没有访问的土地为-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isWater[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    isWater[i][j] = <span class="number">0</span>;</span><br><span class="line">                    que.add(i * n + j);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    isWater[i][j] = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">poll</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll / n, y = poll % n; <span class="comment">// 解析出x与y</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dir[<span class="number">0</span>], newY = y + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// 在区域内且没有被访问过的土地才能BFS</span></span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt;= m - <span class="number">1</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt;= n - <span class="number">1</span> &amp;&amp; isWater[newX][newY] == -<span class="number">1</span>) &#123;</span><br><span class="line">                        isWater[newX][newY] = isWater[x][y] + <span class="number">1</span>;</span><br><span class="line">                        que.add(newX * n + newY);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isWater;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">多源BFS实际就是单源BFS的第二层，在前面加上一个超级源点指向最初入队的节点，就是普通的单源BFS，本篇总结有关于多源BFS有关问题及注意点</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="多源BFS" scheme="https://www.fomal.cc/tags/%E5%A4%9A%E6%BA%90BFS/"/>
    
    <category term="BFS" scheme="https://www.fomal.cc/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>单调栈总结</title>
    <link href="https://www.fomal.cc/posts/e88c5782.html"/>
    <id>https://www.fomal.cc/posts/e88c5782.html</id>
    <published>2022-08-11T12:58:12.000Z</published>
    <updated>2022-08-11T12:58:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-单调栈可以解决的问题：">1.单调栈可以解决的问题：</h3><p>我们常常遇到要在O(N)的时间复杂度内求出当前对象 nums[i] 左边或者右边首个比自己大或者小的情况</p><p>这种问题通常称为<strong>Next Greater问题</strong></p><p>就相当于你是一个人，往两边看首先被哪个高个子挡住，这个高个子满足两个条件：</p><p>1.身高比你高；2.在某一方向中比你高的人中距离你最近</p><p>这种条件可能比较明显，<a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a>  <a href="https://leetcode.cn/problems/next-greater-element-i/">496. 下一个更大元素 I</a> 这类型要你直接求下一个更大更小的元素是什么</p><p>也有可能是比较隐秘的，抽象成<strong>波及范围</strong>的，这属于单调栈中的困难题了 <a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a>  <a href="https://leetcode.cn/problems/subarray-with-elements-greater-than-varying-threshold/">6119. 元素值大于变化阈值的子数组</a></p><p>求某个元素的影响范围，通常都是找到两边首个比自己小的或大的 left 与 right，然后这个[left,right]通常就是影响区间的</p><p>例如[left,right]可以接住高度为max-nums[i]的雨水，可以组成某某区间等…</p><h3 id="2-单调栈的两种写法：">2.单调栈的两种写法：</h3><p>以<a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a> 为例进行说明，一般来说有两种写法：</p><p>1.<strong>Next Greater元素</strong>在栈中的写法（25ms/51.1MB）</p><p>举个🌰：现在要寻找的nums[i]左边首个严格小于nums[i]的元素，st = [1, 2, 3, 6]</p><p>若nums[i]=7，直接取栈顶的6作为左边首个严格小于nums[i]的元素</p><p>若nums[i]=3，要将栈顶中&gt;=nums[i]的元素全部弹出，直至栈顶严格小于nums[i] 此时st = [1, 2]，那么2就是所求</p><p><strong>要点：</strong> 如果找nums[i] 右边的元素，那么从右边遍历起以便于 Next Greater元素先入栈；</p><p>反之，如果找nums[i] 左边的元素，那么从左边遍历起以便于 Next Greater元素先入栈；</p><p>当前遍历到的nums[i]就是基准元素，如果找右边首个大于nums[i]的就要一直保持nums[i]是最左边的且是最小的，不符合条件的栈顶元素（&lt;=nums[i]的）就出栈，直到符合条件就找到了答案。</p><p><img src="../images/p8.jpg" alt="p8"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] tem) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        写法1:Next Greater元素在栈中的写法</span></span><br><span class="line"><span class="comment">        我们要找nums[i]右边首个比自身严格大的温度，因此要从右边起遍历温度</span></span><br><span class="line"><span class="comment">        并且维护一个严格单调递增的栈（从左往右看）</span></span><br><span class="line"><span class="comment">        单调找的操作有如下两种选择：</span></span><br><span class="line"><span class="comment">        1.tem[i]&lt;tem[栈顶] 说明找到tem[i]右边首个比自身大的温度，直接记录，最后tem[i]也要入栈</span></span><br><span class="line"><span class="comment">        2.tem[i]&gt;=tem[栈顶] 说明栈顶不是符合要求的元素，逐个弹出直至tem[i]&lt;tem[栈顶]，记录结果，最后tem[i]也要入栈</span></span><br><span class="line"><span class="comment">        特殊情况：栈为空直接入栈</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tem.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 单调栈存储索引即可</span></span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// tem[i]&gt;=tem[栈顶] 弹出栈顶元素直至tem[i]&lt;tem[栈顶]</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; tem[i] &gt;= tem[stack.peekFirst()]) stack.pollFirst();</span><br><span class="line">            <span class="comment">// 记录结果:栈为空说明tem[i]后面没有比tem[i]温度高的，记录0；否则记录天数差值</span></span><br><span class="line">            res[i] = stack.isEmpty() ? <span class="number">0</span> : stack.peekFirst() - i;</span><br><span class="line">            <span class="comment">// tem[i]入栈</span></span><br><span class="line">            stack.addFirst(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>基准元素nums[i]</strong> 在栈中的写法(23ms/56.8MB)</p><p>举个🌰：现在要寻找的nums[i]右边首个严格大于nums[i]的元素，st = [8, 6, 4, 3]</p><p>现在我们栈中的元素还要找自己右边首个大于自己的元素呢，嗷嗷待哺~~~</p><p>若nums[i]=2，比栈顶还小，直接入栈得了，所有人都还没找到比自己小的元素~~~此时 st = [8, 6, 4, 3, 2]</p><p>此时来了nums[i]=4，栈上方的2与3显然是找到了右边首个比自己严格大的元素，出栈并记录</p><p>但是栈中的4还是没有找到比自己严格大的，因此只能期待接下来有没有更大的数字了~~~</p><p>此时st = [8, 6, 4, 4] 若此时再来个5那么这两个可怜的4就有机会出栈并记录了~~~</p><p><strong>要点：</strong> 如果找nums[i] 右边的元素，那么从左边遍历起以便于基准元素nuns[i]先入栈；</p><p>反之，如果找nums[i] 左边的元素，那么从右遍历起以便于基准元素nums[i]先入栈；</p><p>当前遍历到的nums[i]就是基准元素，且一直要保持栈顶是最小的，一旦新来的nums[i]严格大于栈顶的小可怜，就代表栈顶的小可怜可以出栈记录了</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] tem) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    写法2:基准元素nums[i]在栈中的写法</span></span><br><span class="line"><span class="comment">    我们要找nums[i]右边首个比自身严格大的温度，因此要从左起遍历温度以便于基准元素入栈</span></span><br><span class="line"><span class="comment">    维护一个单调递减栈（从左往右看） 一旦栈顶小可爱遇到比自己大的就冲出来并记录</span></span><br><span class="line"><span class="comment">    1.tem[i]&lt;=tem[栈顶] 说明栈顶的小可爱都还没找到下一个比自己严格大的元素，tem[i]直接入栈当下一个小可爱</span></span><br><span class="line"><span class="comment">    2.tem[i]&gt;tem[栈顶] 说明栈顶那群小可爱已经找到下一个比自己严格大的元素，出栈并记录，最后别忘了tem[i]也要入栈找自己的下一个比自身大的元素</span></span><br><span class="line"><span class="comment">    特殊情况：栈为空直接入栈即可，栈顶没有人要找下一个更大的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tem.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">// 单调栈存储索引即可</span></span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 当栈顶小可爱遇到比自己大的tem[i]，c出栈并记录后tem[i]入栈</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; tem[i] &gt; tem[stack.peekFirst()]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">poll</span> <span class="operator">=</span> stack.pollFirst();</span><br><span class="line">            res[poll] = i - poll;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则直接入栈</span></span><br><span class="line">        stack.addFirst(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由运行结果可知两种写法时间消耗与空间消耗接近，个人比较推荐<strong>写法1</strong></p><h3 id="3-API的选用习惯：">3.API的选用习惯：</h3><p>目前比较推荐以下两种：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写法1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Deque&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">st.push(i);    <span class="comment">// 元素入栈</span></span><br><span class="line">st.peek();    <span class="comment">// 查看栈顶元素</span></span><br><span class="line">st.pop();    <span class="comment">// 弹出栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写法2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Deque&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">st.addFirst(i);    <span class="comment">// 元素入栈</span></span><br><span class="line">st.peekFirst();    <span class="comment">// 查看栈顶元素</span></span><br><span class="line">st.pollFirst();    <span class="comment">// 弹出栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="4-单调栈与范围管辖问题（Hard）">4.单调栈与范围管辖问题（Hard）</h3><p><a href="https://leetcode.cn/problems/sum-of-subarray-ranges/"><strong>2104. 子数组范围和</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subArrayRanges</span><span class="params">(<span class="type">int</span>[] _nums)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法2：单调栈</span></span><br><span class="line"><span class="comment">    我们要找nums[i]中所有的子数组的max-min的和，那么我们罗列出所有子数组，其最大值和最小值必定出自于nums[i]其中某一个</span></span><br><span class="line"><span class="comment">    换一个角度，我们假设nums[i]作为max管辖的子数组个数为k1，最为min管辖的子数组个数为k2，那么nums[i]*(k2-k1)就是nums[i]这个数字贡献的范围和</span></span><br><span class="line"><span class="comment">    我们怎样知道某个nums[i]的管辖范围？很显然要找到nums[i]在包含自身的哪个范围内是“老大”</span></span><br><span class="line"><span class="comment">    例如作为max就要知道自己左右两边首个比自己大的数字，在这两个数字之间nums[i]就是老大</span></span><br><span class="line"><span class="comment">    这种情况显然就要用到单调找来查找自己的管辖范围</span></span><br><span class="line"><span class="comment">    以求最大值为例进行说明，我们要求自己左右两边比自己大的数字，先以左边为例进行说明</span></span><br><span class="line"><span class="comment">    在栈中从左到右维护一个单调递减栈，一旦遇到nums[i]&lt;nums[栈顶]就说明nums[i]找到了比自己大的数字位置</span></span><br><span class="line"><span class="comment">    找到nums[i]左右两边比自己大的数字位置之后，例如 nums = [4,-2,-3,4,1] 计算得idx=3的元素范围为[-1,5]</span></span><br><span class="line"><span class="comment">    这里是下一个比自己大的数字范围，因此包含idx=3的子数组个数为：(3-(-1))*(5-3)=8 左边4个:3  2,3  1,2,3  0,1,2,3</span></span><br><span class="line"><span class="comment">    右边2个:∅  4 换算到一般情况就是 (idx-left)*(right-idx)</span></span><br><span class="line"><span class="comment">    注意点：nums = [4,-2,-3,4,1] 这种情况下我们会求得第一个4的范围为：[0,4] 同理第二个范围也为：[0,4]</span></span><br><span class="line"><span class="comment">    这两种情况会重复计算第一个4与第二个4共存的情况</span></span><br><span class="line"><span class="comment">    因此我们在单调栈计算的时候，约定左边找比自己严格大(小)的首个数字，右边找大于等于(小于等于)自己的首个数字</span></span><br><span class="line"><span class="comment">    时间复杂度:O(N) 空间复杂度:O(N)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    nums = _nums;</span><br><span class="line">    n = nums.length;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// max[i]表示nums[i]作为最大值的子数组个数，min[i]表示nums[i]作为最小值的子数组个数</span></span><br><span class="line">    <span class="type">int</span>[] max = getCnt(<span class="literal">true</span>), min = getCnt(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 计算所有子数组范围和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res += (<span class="type">long</span>) (max[i] - min[i]) * nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getCnt(true)表示获取nums[i]最大值的子数组个数，反之就是获取nums[i]最大值的子数组个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] getCnt(<span class="type">boolean</span> isMax) &#123;</span><br><span class="line">    <span class="comment">// ans[i]表示要返回的数据</span></span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">// left[i]表示nums[i]左边首个严格大于(小于)自身的数字索引</span></span><br><span class="line">    <span class="comment">// right[i]表示nums[i]左边首个非严格大于(小于)自身的数字索引</span></span><br><span class="line">    <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[n], right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">// 利用单调栈查找管辖范围</span></span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; (isMax ? nums[i] &gt;= nums[stack.peekFirst()] : nums[i] &lt;= nums[stack.peekFirst()])) stack.pollFirst();</span><br><span class="line">        left[i] = stack.isEmpty() ? -<span class="number">1</span> : stack.peekFirst();</span><br><span class="line">        stack.addFirst(i);</span><br><span class="line">    &#125;</span><br><span class="line">    stack.clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; (isMax ? nums[i] &gt; nums[stack.peekFirst()] : nums[i] &lt; nums[stack.peekFirst()])) stack.pollFirst();</span><br><span class="line">        right[i] = stack.isEmpty() ? n : stack.peekFirst();</span><br><span class="line">        stack.addFirst(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算管辖范围内子数组个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans[i] = (i - left[i]) * (right[i] - i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/subarray-with-elements-greater-than-varying-threshold/"><strong>2334. 元素值大于变化阈值的子数组</strong></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">validSubarraySize</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        单调栈的应用:</span></span><br><span class="line"><span class="comment">        不妨枚举nums[i]并假设某包含nums[i]的子段是长度为k的某段中最小的数字</span></span><br><span class="line"><span class="comment">        在该段中其余数字都大于nums[i]，只要nums[i]&gt;threshold/k，那么段内的所有元素均大于threshold/k</span></span><br><span class="line"><span class="comment">        我们只需要求出有没有这样的nums[i]就可以知道是否有符合题意的k</span></span><br><span class="line"><span class="comment">        怎样维护某个nums[i]在某个段内是最小的数字？我们只需要找到nums[i]左边和右边首个严格小于nums[i]的索引</span></span><br><span class="line"><span class="comment">        那么索引之间就是nums[i]这段的波及范围</span></span><br><span class="line"><span class="comment">        快速求nums[i]左边和右边首个小于nums[i]的元素属于Next Greater问题，可以用单调栈解决</span></span><br><span class="line"><span class="comment">        时间复杂度：O(N) 空间复杂度：O(N)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 两个单调栈st1与st2</span></span><br><span class="line">        Deque&lt;Integer&gt; st1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(), st2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// left[i]存储nums[i]左边首个严格小于nums[i]的数字索引，不存在时为-1</span></span><br><span class="line">        <span class="comment">// right[i]存储nums[i]右边首个严格小于nums[i]的数字索引，不存在时为n</span></span><br><span class="line">        <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[n], right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 正序遍历求left[i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 遇到nums[i]&lt;=nums[栈顶索引] -&gt; 弹出栈顶索引直至nums[i]&gt;nums[栈顶索引]</span></span><br><span class="line">            <span class="comment">// 此时nums[栈顶索引]就是nums[i]左边首个严格小于nums[i]的数字</span></span><br><span class="line">            <span class="comment">// 被弹出的那些栈顶元素是不可能成为后面left[i]有效取值的，因为会优先取到当前的nums[i]</span></span><br><span class="line">            <span class="comment">// e.g. nums[st1]=[1,2,4,5] nums[i]=3 显然4与5不符合题意弹出 3才是符合题意的 加入后面有个6进来了</span></span><br><span class="line">            <span class="comment">// 必然会优先取到3而不会取更前面的4与5</span></span><br><span class="line">            <span class="keyword">while</span> (!st1.isEmpty() &amp;&amp; nums[st1.peek()] &gt;= nums[i]) st1.pop();    <span class="comment">// 一直弹出直至st1严格递增</span></span><br><span class="line">            left[i] = st1.isEmpty() ? -<span class="number">1</span> : st1.peek();  <span class="comment">// 栈顶的必定1严格小于nums[i]并且是最近的(-1表示取全部)</span></span><br><span class="line">            st1.push(i);    <span class="comment">// 每次都要入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 倒序遍历求right[i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!st2.isEmpty() &amp;&amp; nums[st2.peek()] &gt;= nums[i]) st2.pop();</span><br><span class="line">            right[i] = st2.isEmpty() ? n : st2.peek();</span><br><span class="line">            st2.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 枚举nums[i]根据其波及范围确定到k，再判断k是否合法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> right[i] - left[i] - <span class="number">1</span>; <span class="comment">// 实际范围:[left[i]+1,right[i]-1]</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; threshold / k) <span class="keyword">return</span> k;  <span class="comment">// 合法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 不存在</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-栈结构写法的优化">5.栈结构写法的优化</h3><p>以<a href="https://leetcode.cn/problems/sum-of-subarray-ranges/"><strong>2104. 子数组范围和</strong></a>为例进行说明</p><p>栈结构还可以优化成数组的写法，辅助一个ptr指针，在数据范围小的时候非常节省时间与空间</p><p>其中<strong>ptr指代当前栈中栈顶元素所在stack数组的位置</strong></p><p>prt指针可以初始化为-1或者0表示栈底索引，栈的容量初始化为可能出现的最大栈中元素个数</p><p><strong>入栈：</strong> stack[++ptr]=i腾出空位再赋值</p><p><strong>出栈：</strong> 直接ptr–即可，后面新元素入栈会覆盖掉旧的痕迹</p><p><strong>查看栈顶元素：</strong> 返回stack[ptr]就是</p><p><strong>清空栈：</strong> ptr=0（-1）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subArrayRanges</span><span class="params">(<span class="type">int</span>[] _nums)</span> &#123;</span><br><span class="line">    nums = _nums;</span><br><span class="line">    n = nums.length;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// max[i]表示nums[i]作为最大值的子数组个数，min[i]表示nums[i]作为最小值的子数组个数</span></span><br><span class="line">    <span class="type">int</span>[] max = getCnt(<span class="literal">true</span>), min = getCnt(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 计算所有子数组范围和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res += (<span class="type">long</span>) (max[i] - min[i]) * nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getCnt(true)表示获取nums[i]最大值的子数组个数，反之就是获取nums[i]最大值的子数组个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] getCnt(<span class="type">boolean</span> isMax) &#123;</span><br><span class="line">    <span class="comment">// ans[i]表示要返回的数据</span></span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">// left[i]表示nums[i]左边首个严格大于(小于)自身的数字索引</span></span><br><span class="line">    <span class="comment">// right[i]表示nums[i]左边首个非严格大于(小于)自身的数字索引</span></span><br><span class="line">    <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[n], right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">// 利用单调栈查找管辖范围(数组模拟栈结构，在范围小得时候非常好用)</span></span><br><span class="line">    <span class="type">int</span>[] stack = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">ptr</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// ptr指代当前栈中栈顶元素所在stack数组的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (ptr &gt; <span class="number">0</span> &amp;&amp; (isMax ? nums[i] &gt;= nums[stack[ptr]] : nums[i] &lt;= nums[stack[ptr]])) ptr--;</span><br><span class="line">        left[i] = ptr == <span class="number">0</span> ? -<span class="number">1</span> : stack[ptr];</span><br><span class="line">        stack[++ptr] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr = <span class="number">0</span>;    <span class="comment">// 清空栈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (ptr &gt; <span class="number">0</span> &amp;&amp; (isMax ? nums[i] &gt; nums[stack[ptr]] : nums[i] &lt; nums[stack[ptr]])) ptr--;</span><br><span class="line">        right[i] = ptr == <span class="number">0</span> ? n : stack[ptr];</span><br><span class="line">        stack[++ptr] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算管辖范围内子数组个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans[i] = (i - left[i]) * (right[i] - i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-记录的一些练习题">6.记录的一些练习题</h3><h4 id="6-1-LC402-移掉-K-位数字"><a href="https://leetcode-cn.com/problems/remove-k-digits/"><strong>6.1 LC402. 移掉 K 位数字</strong></a></h4><p>给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。</p><p>请你以字符串形式返回这个最小的数字。</p><p><img src="../images/p24.jpg" alt="p24"></p><p><strong>思路：</strong></p><p><strong>单调栈</strong>:维护一个栈底-&gt;栈顶单调递增的栈(参考&quot;笨猪爆破组&quot;题解)</p><p>要尽量让高位维护一个递增的趋势，即去除高位的降序对</p><p>如:1234532与5321234，当组成数字相同时，必定是前面高位递增数值会更加小</p><p>现在任务变成：删除k位使得高位的递增序列尽量长(删除高位尽可能多的递减对)</p><p>单调栈按顺序存储想要的数字，其中栈顶为栈中最大值，将当前遍历到的数字与栈顶比较决定栈顶的去留</p><p>设栈顶数字为B，当前遍历到的数字为A：</p><p>1.B &gt; A：B与A之间组成递减对，此时去掉B，A代替B的位置可以使得数值变小</p><p>2.B &lt;= A：B与A之间组成递增对，让A入栈是最好的选择</p><p>这里要注意几个问题：</p><p>1.能去除（出栈）的数字个数有限，不能超过k，因此超过k部分直接加入，不保证栈的单调性</p><p>2.考虑去除前导0的情况，前导0不能加入；换句话说就是：非0和有垫底的0可以加入</p><p>3.当前num中的降序对 &lt; k时，删除完所有降序对后，num已经是递增，此时截取前面部分就是最小的;</p><p>4.当前num中的降序对 &gt;= k时，恰好删除完或者有剩余，此时num后面的直接加入即可，不用考虑保持栈的单调性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeKdigits</span><span class="params">(String num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num.length() == k) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 单调栈</span></span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历num每一个数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : num.toCharArray()) &#123;</span><br><span class="line">            <span class="comment">// 找出降序对</span></span><br><span class="line">            <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peekFirst() &gt; ch) &#123;</span><br><span class="line">                <span class="comment">// 这里弹出一个表明num中删除了一个(降序对的前一个元素)</span></span><br><span class="line">                stack.pollFirst();</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 为了去除前导0:非0的直接加入;当前栈有垫底的,啥都可以加入</span></span><br><span class="line">            <span class="keyword">if</span>(ch != <span class="string">&#x27;0&#x27;</span> || !stack.isEmpty()) stack.addFirst(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历完num所有数字,但是k还大于0,要截取前面的数字(相当于把栈顶部分弹出k个)</span></span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span> &amp;&amp; !stack.isEmpty()) stack.pollFirst();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) sb.append(stack.pollFirst());</span><br><span class="line">        <span class="comment">// 这里要考虑到栈为空的情况,sb没东西表明为0</span></span><br><span class="line">        <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span> : sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-LC316-去除重复字母"><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/"><strong>6.2 LC316. 去除重复字母</strong></a></h4><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。</p><p>需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p><p><img src="../images/p25.jpg" alt="p25"></p><p><strong>思路：</strong></p><p><strong>单调栈+标记:</strong></p><p>参考labuladong的题解，本题的关键点有几个：</p><p>1.要求最后的字母没有重复，且每个字母都要出现一次</p><p>2.要按照原来字母的出现顺序输出(相对顺序不变)</p><p>3.满足条件1与2前提下的要求返回字符串的字典序最小</p><p>其中，条件1可以用boolean数组或者HashSet等数据结构来进行存储，如果前面出现过就不加入；</p><p>条件2要求相对顺序不变，可以用一个指针进行遍历再存储，只要满足数据存储有序的数据结构即可</p><p>最关键的是条件3，要求字典序最小的情形输出。这里就是要用到单调栈最深层的原因</p><p>因为我们要操作&quot;临近元素&quot;(降序对)！为什么要操作降序对？</p><p>这个可以参考  402. 移掉 K 位数字(中等)</p><p>402题是要求删掉k个数字使得最后的结果最小，核心就是优先找出&quot;降序对&quot;，例如：76，98，54…</p><p>因为当你删除了降序对前面的数字后，后面数字的居上取代了原来前面的数字，必定使得数字变小</p><p>A=123a56与B=123b56，a与b当前面完全一致，整个数字大小取决于a与b的大小，a&gt;b则A&gt;B</p><p>回到本题中，我们要使得字典序在满足其他条件的前提下尽可能小，那么可以选择删掉降序对的前面字母</p><p>由于后来居上的特征，降序对是不断变化的，因此要用<strong>栈</strong>这种结构来模拟，每当当前字母ch满足其他条件时，</p><p>如果与栈顶组成降序对，说明我现在<strong>有机会</strong>让字典序变小，因此必然会想着将栈顶元素弹出！</p><p>可是本题要求所有字母都要出现一次，你把栈顶弹出了之后万一后面不再出现栈顶的字母不就不满足题意？</p><p>因此还要看看后面有没有再出现栈顶元素：</p><p>1.若没有出现则不能弹出，ch乖乖进去吧！</p><p>2.若后面还会出现，可以放心弹出，后面还可以加入该字母的，这样既使得字典序尽量小又能满足条件！</p><p>做法就是用count数组维护当前位置后面剩余的每个字母个数，当个数减为0时说明后面没有了！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicateLetters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 统计当前位置剩余字符的个数</span></span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            count[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计某个字母是否在栈中(用于栈中去重)</span></span><br><span class="line">        <span class="type">boolean</span>[] inStack = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">// 单调栈:按照字母的字典序保存字母</span></span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历字符串s</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="comment">// 字符c次数-1</span></span><br><span class="line">            count[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="comment">// 栈中已经有了,不再加入</span></span><br><span class="line">            <span class="keyword">if</span>(inStack[c - <span class="string">&#x27;a&#x27;</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 字符c入栈,入栈前要将所有的字典序比c大且后面还会出现的字母弹出</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; c &lt; stack.peekFirst()) &#123;</span><br><span class="line">                <span class="comment">// 栈顶字母后面没有出现了,不能再弹出</span></span><br><span class="line">                <span class="keyword">if</span>(count[stack.peekFirst() - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 否则可以弹出</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">poll</span> <span class="operator">=</span> stack.pollFirst();</span><br><span class="line">                <span class="comment">// 弹出的就将栈中的记录删除</span></span><br><span class="line">                inStack[poll - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 字符c入栈</span></span><br><span class="line">            stack.addFirst(c);</span><br><span class="line">            <span class="comment">// 入栈后要标记</span></span><br><span class="line">            inStack[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后将栈中的元素逐个弹出存入sb中</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            sb.append(stack.pollFirst());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 还要倒序一下才是正确顺序</span></span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题 03.02. 栈的最小值 同 155.最小栈</strong></p><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><p>实现 MinStack 类:</p><p>MinStack() 初始化堆栈对象。</p><p>void push(int val) 将元素val推入堆栈。</p><p>void pop() 删除堆栈顶部的元素。</p><p>int top() 获取堆栈顶部的元素。</p><p>int getMin() 获取堆栈中的最小元素。</p><p><img src="../images/p26.jpg" alt="p26"></p><p><strong>思路：</strong></p><p><strong>单调递增栈</strong>(栈顶-&gt;栈底)维护栈中元素最小值:</p><p>方法1：完全同步栈：一个为常规栈（主栈）；另一个为同步栈，保存每一步中主栈元素最小值</p><p>这个方法要求主栈与同步栈的元素个数严格相等，加入时两个同步加入，弹出时两个同步弹出，无需多加判断</p><p>这种方法存在一定的冗余存储，于是就有了方法2</p><p>方法2：主栈+单调栈：一个为主栈，另一个为单调递增栈(栈顶-&gt;栈底)，当且仅当要加入的元素x&lt;=单调栈栈顶时才加入</p><p>其余情况不加入；同理，弹出时要看单调栈栈顶是否与主栈弹出的元素相等，若相等的话就弹出。</p><p>注意：这个单调栈是非主动挤压型的，也就是在加入元素时，如果当前元素不能与现在的单调栈构成单调递增栈会主动放弃，而不会将栈中不符合条件的全部弹出(这显然会损失掉部分最小值信息!)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack_1</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack;</span><br><span class="line">    Deque&lt;Integer&gt; minStack;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack_1</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这一步很关键:就是让首个加入的x也可以顺利加入minStack</span></span><br><span class="line">        minStack.addFirst(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往栈顶加入元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 常规栈直接加入,最小栈加入当前栈中最小值(统一以队头为栈顶)</span></span><br><span class="line">        stack.addFirst(x);</span><br><span class="line">        <span class="comment">// 求出当前栈中的最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(minStack.peekFirst(), x);</span><br><span class="line">        minStack.addFirst(min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹出栈顶元素(不返回)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 常规栈直接弹出,最小栈同步更新</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pollFirst();</span><br><span class="line">        <span class="comment">// 这里无论pop是何止都要弹出minStack栈顶,因为两个栈的个数总是一致的</span></span><br><span class="line">        minStack.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈顶元素(不弹出)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈中最小值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack_2</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack;</span><br><span class="line">    Deque&lt;Integer&gt; minStack;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack_2</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这一步很关键:就是让首个加入的x也可以顺利加入minStack</span></span><br><span class="line">        minStack.addFirst(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往栈顶加入元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 常规栈直接加入,最小栈加入当前栈中最小值(统一以队头为栈顶)</span></span><br><span class="line">        stack.addFirst(x);</span><br><span class="line">        <span class="comment">// 求出当前栈中的最小值</span></span><br><span class="line">        <span class="keyword">if</span>(x &lt;= minStack.peekFirst()) minStack.addFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹出栈顶元素(不返回)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 常规栈直接弹出,最小栈同步更新</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pollFirst();</span><br><span class="line">        <span class="comment">// 区别就在这里:这里要看与pop相等的栈顶才弹出</span></span><br><span class="line">        <span class="keyword">if</span>(minStack.peekFirst() == pop) minStack.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈顶元素(不弹出)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈中最小值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peekFirst();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这道题要时刻注意判空异常，还有初始化辅助栈要将不影响首个元素入栈的Integer.MAX_VALUE加入!!!记住了</strong></p></blockquote>]]></content>
    
    
    <summary type="html">单调栈的作用是及时弹出没用的元素，用来降低算法的时间复杂度</summary>
    
    
    
    <category term="算法" scheme="https://www.fomal.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="单调栈" scheme="https://www.fomal.cc/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
</feed>
